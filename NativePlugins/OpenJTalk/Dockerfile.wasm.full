# Full production Dockerfile for building OpenJTalk WebAssembly module
FROM emscripten/emsdk:3.1.50

# Install required packages
RUN apt-get update && apt-get install -y \
    cmake \
    build-essential \
    git \
    wget \
    tar \
    patch \
    autoconf \
    automake \
    libtool \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Download and extract OpenJTalk source (includes mecab)
RUN wget https://sourceforge.net/projects/open-jtalk/files/Open%20JTalk/open_jtalk-1.11/open_jtalk-1.11.tar.gz && \
    tar -xzf open_jtalk-1.11.tar.gz && \
    rm open_jtalk-1.11.tar.gz

# Copy our wrapper source
COPY src/openjtalk_wasm_wrapper.c /build/

# Create build script
RUN cat > build_openjtalk_wasm.sh << 'EOF'
#!/bin/bash
set -e

cd /build/open_jtalk-1.11

# Build mecab first
echo "=== Building mecab ==="
cd mecab
emconfigure ./configure --enable-static --disable-shared --with-charset=utf8
emmake make -j$(nproc)
cd ..

# Build each OpenJTalk component
echo "=== Building OpenJTalk components ==="
for component in text2mecab mecab2njd njd njd_set_pronunciation njd_set_digit njd_set_accent_phrase njd_set_accent_type njd_set_unvoiced_vowel njd_set_long_vowel njd2jpcommon jpcommon; do
    echo "Building $component..."
    cd $component
    
    # If configure script exists, use it
    if [ -f configure ]; then
        emconfigure ./configure --enable-static --disable-shared
    fi
    
    # Build the component
    emmake make -j$(nproc)
    cd ..
done

echo "=== All components built successfully ==="
EOF

RUN chmod +x build_openjtalk_wasm.sh && ./build_openjtalk_wasm.sh

# Create pre.js for HEAP export
RUN cat > /build/pre.js << 'EOF'
Module['preRun'] = Module['preRun'] || [];
Module['preRun'].push(function() {
    // Ensure HEAP arrays are accessible
    var heapNames = ['HEAP8', 'HEAPU8', 'HEAP16', 'HEAPU16', 'HEAP32', 'HEAPU32', 'HEAPF32', 'HEAPF64'];
    heapNames.forEach(function(name) {
        if (typeof Module[name] === 'undefined' && typeof self[name] !== 'undefined') {
            Module[name] = self[name];
        }
    });
});
EOF

# Create post.js
RUN cat > /build/post.js << 'EOF'
// Ensure HEAP arrays are exported
if (typeof Module !== 'undefined') {
    var heapNames = ['HEAP8', 'HEAPU8', 'HEAP16', 'HEAPU16', 'HEAP32', 'HEAPU32', 'HEAPF32', 'HEAPF64'];
    heapNames.forEach(function(name) {
        if (typeof self[name] !== 'undefined') {
            Module[name] = self[name];
        }
    });
}
EOF

# Build the final WebAssembly module
RUN emcc -O2 \
    -I/build/open_jtalk-1.11/mecab/src \
    -I/build/open_jtalk-1.11/text2mecab \
    -I/build/open_jtalk-1.11/mecab2njd \
    -I/build/open_jtalk-1.11/njd \
    -I/build/open_jtalk-1.11/njd_set_pronunciation \
    -I/build/open_jtalk-1.11/njd_set_digit \
    -I/build/open_jtalk-1.11/njd_set_accent_phrase \
    -I/build/open_jtalk-1.11/njd_set_accent_type \
    -I/build/open_jtalk-1.11/njd_set_unvoiced_vowel \
    -I/build/open_jtalk-1.11/njd_set_long_vowel \
    -I/build/open_jtalk-1.11/njd2jpcommon \
    -I/build/open_jtalk-1.11/jpcommon \
    /build/openjtalk_wasm_wrapper.c \
    /build/open_jtalk-1.11/jpcommon/.libs/libjpcommon.a \
    /build/open_jtalk-1.11/njd2jpcommon/.libs/libnjd2jpcommon.a \
    /build/open_jtalk-1.11/njd_set_long_vowel/.libs/libnjd_set_long_vowel.a \
    /build/open_jtalk-1.11/njd_set_unvoiced_vowel/.libs/libnjd_set_unvoiced_vowel.a \
    /build/open_jtalk-1.11/njd_set_accent_type/.libs/libnjd_set_accent_type.a \
    /build/open_jtalk-1.11/njd_set_accent_phrase/.libs/libnjd_set_accent_phrase.a \
    /build/open_jtalk-1.11/njd_set_digit/.libs/libnjd_set_digit.a \
    /build/open_jtalk-1.11/njd_set_pronunciation/.libs/libnjd_set_pronunciation.a \
    /build/open_jtalk-1.11/njd/.libs/libnjd.a \
    /build/open_jtalk-1.11/mecab2njd/.libs/libmecab2njd.a \
    /build/open_jtalk-1.11/text2mecab/.libs/libtext2mecab.a \
    /build/open_jtalk-1.11/mecab/src/.libs/libmecab.a \
    -o openjtalk.js \
    -s EXPORTED_FUNCTIONS='["_openjtalk_initialize","_openjtalk_text_to_phonemes","_openjtalk_get_phonemes_json","_openjtalk_free_string","_openjtalk_cleanup","_openjtalk_test","_malloc","_free"]' \
    -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap","getValue","setValue","UTF8ToString","stringToUTF8","lengthBytesUTF8","allocate","allocateUTF8","FS"]' \
    -s MODULARIZE=1 \
    -s EXPORT_NAME='OpenJTalkModule' \
    -s ENVIRONMENT='web' \
    -s ALLOW_MEMORY_GROWTH=1 \
    -s INITIAL_MEMORY=67108864 \
    -s MAXIMUM_MEMORY=268435456 \
    -s FORCE_FILESYSTEM=1 \
    -s SINGLE_FILE=0 \
    -s WASM=1 \
    -s STACK_SIZE=1048576 \
    --pre-js /build/pre.js \
    --post-js /build/post.js

# Output files will be:
# /build/openjtalk.js
# /build/openjtalk.wasm