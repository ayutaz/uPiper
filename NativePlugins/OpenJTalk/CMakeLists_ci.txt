cmake_minimum_required(VERSION 3.10)
project(openjtalk_wrapper VERSION 2.0.0)

# C standard
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)

# Platform detection
if(WIN32)
    set(PLATFORM_NAME "windows")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-DOPENJTALK_EXPORTS)
elseif(UNIX AND NOT APPLE)
    set(PLATFORM_NAME "linux")
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
elseif(APPLE)
    set(PLATFORM_NAME "macos")
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

# Output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Build options
option(ENABLE_DEBUG_LOG "Enable debug logging" OFF)

# Source files - use simplified implementation for CI
set(SOURCES
    src/openjtalk_wrapper.c
    src/mecab_full.c
    src/mecab_dict_loader.c
    src/mecab_darts.c
    src/surface_index.c
    src/phoneme_converter.c
    src/phoneme_timing.c
    src/phonemizer.c
    src/accent_estimator.c
    src/error_handling.c
    src/memory_pool.c
)

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Create shared library
add_library(openjtalk_wrapper SHARED ${SOURCES})

# Platform-specific settings
if(WIN32)
    set_target_properties(openjtalk_wrapper PROPERTIES
        PREFIX ""
        OUTPUT_NAME "openjtalk_wrapper"
        SUFFIX ".dll"
    )
    
    # Export all symbols on Windows
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
    
elseif(APPLE)
    set_target_properties(openjtalk_wrapper PROPERTIES
        PREFIX "lib"
        OUTPUT_NAME "openjtalk_wrapper"
        SUFFIX ".dylib"
    )
    
    # macOS specific linker flags
    target_link_libraries(openjtalk_wrapper
        "-framework CoreFoundation"
    )
elseif(UNIX)
    set_target_properties(openjtalk_wrapper PROPERTIES
        PREFIX "lib"
        OUTPUT_NAME "openjtalk_wrapper"
        SUFFIX ".so"
    )
    
    # Link pthread on Unix
    find_package(Threads REQUIRED)
    target_link_libraries(openjtalk_wrapper Threads::Threads)
endif()

# Installation rules
install(TARGETS openjtalk_wrapper
    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
)

install(FILES include/openjtalk_wrapper.h
    DESTINATION ${CMAKE_INSTALL_PREFIX}/include
)

# Build type configuration
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Compiler flags
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    if(MSVC)
        target_compile_options(openjtalk_wrapper PRIVATE /W4 /Od /Zi)
    else()
        target_compile_options(openjtalk_wrapper PRIVATE -Wall -Wextra -g -O0)
    endif()
    target_compile_definitions(openjtalk_wrapper PRIVATE ENABLE_DEBUG_LOG)
else()
    if(MSVC)
        target_compile_options(openjtalk_wrapper PRIVATE /W3 /O2)
    else()
        target_compile_options(openjtalk_wrapper PRIVATE -Wall -O3)
    endif()
endif()

# Print build configuration
message(STATUS "Building OpenJTalk Wrapper (CI Version)")
message(STATUS "  Platform: ${PLATFORM_NAME}")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  Install prefix: ${CMAKE_INSTALL_PREFIX}")