cmake_minimum_required(VERSION 3.10)
project(openjtalk_wrapper VERSION 1.0.0)

# C/C++ standards
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Platform detection
if(WIN32)
    set(PLATFORM_NAME "windows")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-DOPENJTALK_EXPORTS)
elseif(UNIX AND NOT APPLE)
    set(PLATFORM_NAME "linux")
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
elseif(APPLE)
    set(PLATFORM_NAME "macos")
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

# Output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Find packages
find_package(Threads REQUIRED)

# External dependencies paths
set(EXTERNAL_DIR ${CMAKE_SOURCE_DIR}/external)
set(HTS_ENGINE_DIR ${EXTERNAL_DIR}/hts_engine_API-1.10)
set(OPENJTALK_DIR ${EXTERNAL_DIR}/open_jtalk-1.11)
set(MECAB_DIR ${EXTERNAL_DIR}/mecab-0.996)

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${HTS_ENGINE_DIR}/include
    ${OPENJTALK_DIR}/src/jpcommon
    ${OPENJTALK_DIR}/src/mecab/src
    ${OPENJTALK_DIR}/src/mecab2njd
    ${OPENJTALK_DIR}/src/njd
    ${OPENJTALK_DIR}/src/njd2jpcommon
    ${OPENJTALK_DIR}/src/njd_set_accent_phrase
    ${OPENJTALK_DIR}/src/njd_set_accent_type
    ${OPENJTALK_DIR}/src/njd_set_digit
    ${OPENJTALK_DIR}/src/njd_set_long_vowel
    ${OPENJTALK_DIR}/src/njd_set_pronunciation
    ${OPENJTALK_DIR}/src/njd_set_unvoiced_vowel
    ${OPENJTALK_DIR}/src/text2mecab
    ${MECAB_DIR}/src
)

# Build hts_engine_API as static library
add_library(hts_engine_API STATIC
    ${HTS_ENGINE_DIR}/lib/HTS_audio.c
    ${HTS_ENGINE_DIR}/lib/HTS_engine.c
    ${HTS_ENGINE_DIR}/lib/HTS_gstream.c
    ${HTS_ENGINE_DIR}/lib/HTS_label.c
    ${HTS_ENGINE_DIR}/lib/HTS_misc.c
    ${HTS_ENGINE_DIR}/lib/HTS_model.c
    ${HTS_ENGINE_DIR}/lib/HTS_pstream.c
    ${HTS_ENGINE_DIR}/lib/HTS_sstream.c
    ${HTS_ENGINE_DIR}/lib/HTS_vocoder.c
)
target_compile_definitions(hts_engine_API PRIVATE AUDIO_PLAY_NONE)

# Build minimal Mecab (embedded version)
add_library(mecab_minimal STATIC
    ${MECAB_DIR}/src/char_property.cpp
    ${MECAB_DIR}/src/connector.cpp
    ${MECAB_DIR}/src/context_id.cpp
    ${MECAB_DIR}/src/dictionary.cpp
    ${MECAB_DIR}/src/dictionary_compiler.cpp
    ${MECAB_DIR}/src/dictionary_generator.cpp
    ${MECAB_DIR}/src/dictionary_rewriter.cpp
    ${MECAB_DIR}/src/eval.cpp
    ${MECAB_DIR}/src/feature_index.cpp
    ${MECAB_DIR}/src/iconv_utils.cpp
    ${MECAB_DIR}/src/lbfgs.cpp
    ${MECAB_DIR}/src/learner.cpp
    ${MECAB_DIR}/src/learner_tagger.cpp
    ${MECAB_DIR}/src/libmecab.cpp
    ${MECAB_DIR}/src/nbest_generator.cpp
    ${MECAB_DIR}/src/param.cpp
    ${MECAB_DIR}/src/string_buffer.cpp
    ${MECAB_DIR}/src/tagger.cpp
    ${MECAB_DIR}/src/tokenizer.cpp
    ${MECAB_DIR}/src/utils.cpp
    ${MECAB_DIR}/src/viterbi.cpp
    ${MECAB_DIR}/src/writer.cpp
)
target_compile_definitions(mecab_minimal PRIVATE DIC_VERSION=102 HAVE_CONFIG_H)

# Build OpenJTalk components
add_library(openjtalk_components STATIC
    # Text processing
    ${OPENJTALK_DIR}/src/text2mecab/text2mecab.c
    
    # Mecab to NJD
    ${OPENJTALK_DIR}/src/mecab2njd/mecab2njd.c
    
    # NJD processing
    ${OPENJTALK_DIR}/src/njd/njd.c
    ${OPENJTALK_DIR}/src/njd/njd_node.c
    
    # NJD set modules
    ${OPENJTALK_DIR}/src/njd_set_accent_phrase/njd_set_accent_phrase.c
    ${OPENJTALK_DIR}/src/njd_set_accent_type/njd_set_accent_type.c
    ${OPENJTALK_DIR}/src/njd_set_digit/njd_set_digit.c
    ${OPENJTALK_DIR}/src/njd_set_long_vowel/njd_set_long_vowel.c
    ${OPENJTALK_DIR}/src/njd_set_pronunciation/njd_set_pronunciation.c
    ${OPENJTALK_DIR}/src/njd_set_unvoiced_vowel/njd_set_unvoiced_vowel.c
    
    # NJD to JPCommon
    ${OPENJTALK_DIR}/src/njd2jpcommon/njd2jpcommon.c
    
    # JPCommon
    ${OPENJTALK_DIR}/src/jpcommon/jpcommon.c
    ${OPENJTALK_DIR}/src/jpcommon/jpcommon_label.c
    ${OPENJTALK_DIR}/src/jpcommon/jpcommon_node.c
)

# Source files for wrapper
set(SOURCES
    src/openjtalk_wrapper.c
    src/openjtalk_core.c
    src/memory_pool.c
    src/error_handling.c
)

# Header files
set(HEADERS
    include/openjtalk_wrapper.h
    src/openjtalk_core.h
    src/memory_pool.h
    src/error_handling.h
)

# Create shared library
add_library(openjtalk_wrapper SHARED ${SOURCES})

# Link libraries
target_link_libraries(openjtalk_wrapper PRIVATE
    openjtalk_components
    mecab_minimal
    hts_engine_API
    ${CMAKE_THREAD_LIBS_INIT}
)

# Platform-specific settings
if(WIN32)
    set_target_properties(openjtalk_wrapper PROPERTIES
        PREFIX ""
        OUTPUT_NAME "openjtalk_wrapper"
        SUFFIX ".dll"
    )
    
    # Export all symbols on Windows
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
    
    # Link Windows libraries
    target_link_libraries(openjtalk_wrapper PRIVATE ws2_32 winmm)
    
elseif(APPLE)
    set_target_properties(openjtalk_wrapper PROPERTIES
        PREFIX "lib"
        OUTPUT_NAME "openjtalk_wrapper"
        SUFFIX ".dylib"
    )
    
    # macOS specific flags
    set_target_properties(openjtalk_wrapper PROPERTIES
        MACOSX_RPATH ON
        INSTALL_RPATH "@loader_path"
    )
    
elseif(UNIX)
    set_target_properties(openjtalk_wrapper PROPERTIES
        PREFIX "lib"
        OUTPUT_NAME "openjtalk_wrapper"
        SUFFIX ".so"
    )
    
    # Link math library on Unix
    target_link_libraries(openjtalk_wrapper PRIVATE m)
endif()

# Installation rules
install(TARGETS openjtalk_wrapper
    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
)

install(FILES include/openjtalk_wrapper.h
    DESTINATION ${CMAKE_INSTALL_PREFIX}/include
)

# Copy dictionary files
install(DIRECTORY ${EXTERNAL_DIR}/mecab-naist-jdic/
    DESTINATION ${CMAKE_INSTALL_PREFIX}/share/openjtalk/dic
    FILES_MATCHING PATTERN "*.dic" PATTERN "*.def"
)

# Build type configuration
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Compiler flags
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    if(MSVC)
        target_compile_options(openjtalk_wrapper PRIVATE /W4 /Od /Zi)
    else()
        target_compile_options(openjtalk_wrapper PRIVATE -Wall -Wextra -g -O0)
    endif()
else()
    if(MSVC)
        target_compile_options(openjtalk_wrapper PRIVATE /W3 /O2)
    else()
        target_compile_options(openjtalk_wrapper PRIVATE -Wall -O3)
    endif()
endif()

# Print build configuration
message(STATUS "Building OpenJTalk Wrapper (Full Implementation)")
message(STATUS "  Platform: ${PLATFORM_NAME}")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  Install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  hts_engine_API: ${HTS_ENGINE_DIR}")
message(STATUS "  OpenJTalk: ${OPENJTALK_DIR}")
message(STATUS "  Mecab: ${MECAB_DIR}")

# Test executable
option(BUILD_TESTS "Build test programs" ON)
if(BUILD_TESTS)
    add_executable(test_openjtalk test/test_openjtalk_full.c)
    target_link_libraries(test_openjtalk openjtalk_wrapper)
endif()