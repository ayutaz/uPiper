#!/usr/bin/env node
/**
 * WASMÁâà„Å®Windows/AndroidÁâà„ÅÆÊØîËºÉÊ§úË®º
 * Âêå„Åò„ÉÜ„Ç≠„Çπ„Éà„ÅßÈü≥Á¥†ÂåñÁµêÊûú„ÇíÊØîËºÉ
 */

import { readFileSync } from 'fs';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

console.log('================================================');
console.log('OpenJTalk WASM vs Native ÊØîËºÉÊ§úË®º');
console.log('================================================\n');

// Windows/AndroidÁâà„ÅßÊúüÂæÖ„Åï„Çå„ÇãÁµêÊûúÔºàÂÆüÈöõ„ÅÆÂá∫Âäõ‰æãÔºâ
const nativeResults = {
    '„Åì„Çì„Å´„Å°„ÅØ': 'k o N n i ch i w a',
    '‰ªäÊó•„ÅØ„ÅÑ„ÅÑÂ§©Ê∞ó„Åß„Åô„Å≠': 'ky o o w a i i t e N k i d e s u n e',
    'Èü≥Â£∞ÂêàÊàê': 'o N s e e g o o s e e',
    '‰∫∫Â∑•Áü•ËÉΩ': 'j i N k o o ch i n o o',
    'Êù±‰∫¨ÈÉΩ': 't o o ky o o t o',
    'Ê©üÊ¢∞Â≠¶Áøí': 'k i k a i g a k u sh u u',
    'Ëá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ': 'sh i z e N g e N g o sh o r i',
    'Êò•Â§èÁßãÂÜ¨': 'h a r u n a ts u a k i f u y u',
    '„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô': 'a r i g a t o o g o z a i m a s u',
    'Êó•Êú¨Ë™û': 'n i h o N g o'
};

async function runComparison() {
    try {
        // WASM„É¢„Ç∏„É•„Éº„É´„ÇíË™≠„ÅøËæº„Åø
        const OpenJTalkModule = require('./output/openjtalk-unity-full.js');
        
        const module = await OpenJTalkModule({
            locateFile: (path) => {
                if (path.endsWith('.wasm')) return './output/openjtalk-unity-full.wasm';
                if (path.endsWith('.data')) return './output/openjtalk-unity-full.data';
                return path;
            },
            print: () => {},  // Èùô„Åã„Å´„Åô„Çã
            printErr: (text) => console.error(`[ERROR] ${text}`)
        });
        
        // ÂàùÊúüÂåñ
        module.ccall('Open_JTalk_initialize', 'number', [], []);
        module.ccall('Open_JTalk_load', 'number', ['string'], ['/dict']);
        
        console.log('„ÉÜ„Ç≠„Çπ„ÉàÊØîËºÉÁµêÊûú');
        console.log('------------------------');
        
        let matchCount = 0;
        let totalCount = 0;
        const results = [];
        
        for (const [text, expectedNative] of Object.entries(nativeResults)) {
            const outputSize = 1024;
            const outputPtr = module._malloc(outputSize);
            
            const result = module.ccall('Open_JTalk_synthesis', 'number', 
                ['string', 'number', 'number'], 
                [text, outputPtr, outputSize]);
            
            if (result >= 0) {
                const wasmPhonemes = module.UTF8ToString(outputPtr)
                    .replace(/pau\s*/g, '')  // pau „ÇíÈô§Âéª
                    .trim();
                
                // ÊØîËºÉÔºàÂÆåÂÖ®‰∏ÄËá¥„Åæ„Åü„ÅØÈÉ®ÂàÜ‰∏ÄËá¥„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºâ
                const isExactMatch = wasmPhonemes === expectedNative;
                const isSimilar = calculateSimilarity(wasmPhonemes, expectedNative) > 0.8;
                
                totalCount++;
                if (isExactMatch || isSimilar) {
                    matchCount++;
                }
                
                results.push({
                    text,
                    native: expectedNative,
                    wasm: wasmPhonemes,
                    match: isExactMatch ? '‚úÖ ÂÆåÂÖ®‰∏ÄËá¥' : isSimilar ? 'üî∂ È°û‰ºº' : '‚ùå ‰∏ç‰∏ÄËá¥'
                });
                
                console.log(`\n"${text}"`);
                console.log(`  Native: ${expectedNative}`);
                console.log(`  WASM:   ${wasmPhonemes}`);
                console.log(`  ÁµêÊûú:   ${isExactMatch ? '‚úÖ ÂÆåÂÖ®‰∏ÄËá¥' : isSimilar ? 'üî∂ È°û‰ºº' : '‚ùå ‰∏ç‰∏ÄËá¥'}`);
            }
            
            module._free(outputPtr);
        }
        
        // ËæûÊõ∏„Éï„Ç°„Ç§„É´„ÅÆË©≥Á¥∞Á¢∫Ë™ç
        console.log('\n\nËæûÊõ∏„Éï„Ç°„Ç§„É´Ë©≥Á¥∞');
        console.log('------------------------');
        
        if (module.FS && module.FS.readdir) {
            const dictFiles = module.FS.readdir('/dict');
            const expectedFiles = [
                'char.bin',      // ÊñáÂ≠óÂÆöÁæ©
                'matrix.bin',    // ÈÄ£Êé•„Ç≥„Çπ„ÉàË°åÂàó
                'sys.dic',       // „Ç∑„Çπ„ÉÜ„É†ËæûÊõ∏
                'unk.dic',       // Êú™Áü•Ë™ûËæûÊõ∏
                'pos-id.def',    // ÂìÅË©ûIDÂÆöÁæ©
                'rewrite.def',   // Êõ∏„ÅçÊèõ„ÅàË¶èÂâá
                'dicrc',         // ËæûÊõ∏Ë®≠ÂÆö
                'left-id.def',   // Â∑¶ÊñáËÑàID
                'right-id.def'   // Âè≥ÊñáËÑàID
            ];
            
            console.log('Ê§úÂá∫„Åï„Çå„ÅüËæûÊõ∏„Éï„Ç°„Ç§„É´:');
            let hasAllFiles = true;
            for (const expected of expectedFiles) {
                const exists = dictFiles.includes(expected);
                console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${expected}`);
                if (!exists) hasAllFiles = false;
            }
            
            // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Á¢∫Ë™ç
            let totalSize = 0;
            for (const file of dictFiles) {
                if (file !== '.' && file !== '..') {
                    try {
                        const stat = module.FS.stat(`/dict/${file}`);
                        totalSize += stat.size;
                    } catch (e) {}
                }
            }
            
            console.log(`\nËæûÊõ∏Á∑è„Çµ„Ç§„Ç∫: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
            
            if (hasAllFiles && totalSize > 50 * 1024 * 1024) {
                console.log('‚úÖ ÂÆåÂÖ®„Å™ËæûÊõ∏„Éï„Ç°„Ç§„É´„Çª„ÉÉ„Éà„ÅåÂ≠òÂú®„Åó„Åæ„Åô');
            }
        }
        
        // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        module.ccall('Open_JTalk_clear', null, [], []);
        
        // ÁµêÊûú„Çµ„Éû„É™„Éº
        console.log('\n\n================================================');
        console.log('ÊØîËºÉÁµêÊûú„Çµ„Éû„É™„Éº');
        console.log('================================================');
        
        const matchRate = (matchCount / totalCount * 100).toFixed(1);
        console.log(`‰∏ÄËá¥Áéá: ${matchCount}/${totalCount} (${matchRate}%)`);
        
        if (matchRate > 80) {
            console.log('\n‚úÖ ÁµêË´ñ: Windows/AndroidÁâà„Å®È´ò„ÅÑ‰∫íÊèõÊÄß„Åå„ÅÇ„Çä„Åæ„Åô');
            console.log('WASMÁâà„ÅØÂÆåÂÖ®„Å™ËæûÊõ∏„Éô„Éº„ÇπÂÆüË£Ö„Å®„Åó„Å¶Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ');
        } else if (matchRate > 50) {
            console.log('\nüî∂ ÁµêË´ñ: ÈÉ®ÂàÜÁöÑ„Å™‰∫íÊèõÊÄß„Åå„ÅÇ„Çä„Åæ„Åô');
            console.log('Âü∫Êú¨ÁöÑ„Å™Ê©üËÉΩ„ÅØÂãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô„Åå„ÄÅ‰∏ÄÈÉ®Â∑ÆÁï∞„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ');
        } else {
            console.log('\n‚ùå ÁµêË´ñ: ‰∫íÊèõÊÄß„Åå‰Ωé„ÅÑ„Åß„Åô');
            console.log('Á∞°ÊòìÁâà„ÅÆÂÆüË£Ö„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ');
        }
        
        // Ë©≥Á¥∞„Å™Â∑ÆÁï∞ÂàÜÊûê
        console.log('\nÂ∑ÆÁï∞„ÅÆË©≥Á¥∞ÂàÜÊûê:');
        const differences = results.filter(r => !r.match.includes('ÂÆåÂÖ®‰∏ÄËá¥'));
        if (differences.length > 0) {
            for (const diff of differences) {
                console.log(`\n"${diff.text}"`);
                const analysis = analyzeDifference(diff.native, diff.wasm);
                console.log(`  ${analysis}`);
            }
        } else {
            console.log('  Â∑ÆÁï∞„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì');
        }
        
    } catch (error) {
        console.error('„Ç®„É©„Éº:', error.message);
        process.exit(1);
    }
}

// È°û‰ººÂ∫¶Ë®àÁÆóÔºà„É¨„Éº„Éô„É≥„Ç∑„É•„Çø„Ç§„É≥Ë∑ùÈõ¢„Éô„Éº„ÇπÔºâ
function calculateSimilarity(str1, str2) {
    const arr1 = str1.split(' ');
    const arr2 = str2.split(' ');
    
    const matrix = [];
    for (let i = 0; i <= arr2.length; i++) {
        matrix[i] = [i];
    }
    for (let j = 0; j <= arr1.length; j++) {
        matrix[0][j] = j;
    }
    
    for (let i = 1; i <= arr2.length; i++) {
        for (let j = 1; j <= arr1.length; j++) {
            if (arr2[i - 1] === arr1[j - 1]) {
                matrix[i][j] = matrix[i - 1][j - 1];
            } else {
                matrix[i][j] = Math.min(
                    matrix[i - 1][j - 1] + 1,
                    matrix[i][j - 1] + 1,
                    matrix[i - 1][j] + 1
                );
            }
        }
    }
    
    const distance = matrix[arr2.length][arr1.length];
    const maxLength = Math.max(arr1.length, arr2.length);
    return 1 - (distance / maxLength);
}

// Â∑ÆÁï∞ÂàÜÊûê
function analyzeDifference(native, wasm) {
    const nativeArr = native.split(' ');
    const wasmArr = wasm.split(' ');
    
    // Èï∑Èü≥„ÅÆÈÅï„ÅÑ
    const nativeLong = (native.match(/o o/g) || []).length;
    const wasmLong = (wasm.match(/o o/g) || []).length;
    if (nativeLong !== wasmLong) {
        return 'Èï∑Èü≥„ÅÆÂá¶ÁêÜ„Å´Â∑ÆÁï∞„Åå„ÅÇ„Çä„Åæ„Åô';
    }
    
    // ‰øÉÈü≥„ÅÆÈÅï„ÅÑ
    if (native.includes('cl') !== wasm.includes('cl')) {
        return '‰øÉÈü≥Ôºà„Å£Ôºâ„ÅÆÂá¶ÁêÜ„Å´Â∑ÆÁï∞„Åå„ÅÇ„Çä„Åæ„Åô';
    }
    
    // ÊãóÈü≥„ÅÆÈÅï„ÅÑ
    const nativeYoon = (native.match(/[kgsztdhbpmr]y/g) || []).length;
    const wasmYoon = (wasm.match(/[kgsztdhbpmr]y/g) || []).length;
    if (nativeYoon !== wasmYoon) {
        return 'ÊãóÈü≥Ôºà„Åç„ÇÉ„ÄÅ„Åó„ÇÉÁ≠âÔºâ„ÅÆÂá¶ÁêÜ„Å´Â∑ÆÁï∞„Åå„ÅÇ„Çä„Åæ„Åô';
    }
    
    // „Åù„ÅÆ‰ªñ
    if (nativeArr.length !== wasmArr.length) {
        return `Èü≥Á¥†Êï∞„ÅåÁï∞„Å™„Çä„Åæ„ÅôÔºàNative: ${nativeArr.length}, WASM: ${wasmArr.length}Ôºâ`;
    }
    
    return 'ÂæÆÁ¥∞„Å™Èü≥Á¥†„ÅÆÈÅï„ÅÑ„Åå„ÅÇ„Çä„Åæ„Åô';
}

// ÂÆüË°å
runComparison();