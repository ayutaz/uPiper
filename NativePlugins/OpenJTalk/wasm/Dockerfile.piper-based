# Full OpenJTalk WebAssembly Build - Based on piper-plus successful approach
FROM emscripten/emsdk:3.1.39

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    tar \
    git \
    python3 \
    patch \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Download OpenJTalk source
RUN curl -L -o open_jtalk-1.11.tar.gz \
    https://sourceforge.net/projects/open-jtalk/files/Open%20JTalk/open_jtalk-1.11/open_jtalk-1.11.tar.gz/download \
    && tar -xzf open_jtalk-1.11.tar.gz

# Download dictionary
RUN curl -L -o open_jtalk_dic_utf_8-1.11.tar.gz \
    https://sourceforge.net/projects/open-jtalk/files/Dictionary/open_jtalk_dic-1.11/open_jtalk_dic_utf_8-1.11.tar.gz/download \
    && tar -xzf open_jtalk_dic_utf_8-1.11.tar.gz

# Create CMakeLists.txt based on piper-plus (with C++14 and proper settings)
RUN cat > /build/open_jtalk-1.11/CMakeLists.txt << 'EOF'
cmake_minimum_required(VERSION 3.13)
project(OpenJTalk C CXX)

# CRITICAL: Use C++14 to avoid std::binary_function issues
set(CMAKE_C_STANDARD 99)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Version information
set(OPEN_JTALK_VERSION "1.11")

# Source files for mecab
set(MECAB_SOURCES
  mecab/src/char_property.cpp
  mecab/src/connector.cpp
  mecab/src/context_id.cpp
  mecab/src/dictionary.cpp
  mecab/src/dictionary_compiler.cpp
  mecab/src/dictionary_generator.cpp
  mecab/src/dictionary_rewriter.cpp
  mecab/src/eval.cpp
  mecab/src/feature_index.cpp
  mecab/src/iconv_utils.cpp
  mecab/src/lbfgs.cpp
  mecab/src/learner.cpp
  mecab/src/learner_tagger.cpp
  mecab/src/libmecab.cpp
  mecab/src/nbest_generator.cpp
  mecab/src/param.cpp
  mecab/src/string_buffer.cpp
  mecab/src/tagger.cpp
  mecab/src/tokenizer.cpp
  mecab/src/utils.cpp
  mecab/src/viterbi.cpp
  mecab/src/writer.cpp
)

# Source files for njd
set(NJD_SOURCES
  njd/njd.c
  njd/njd_node.c
)

# Source files for njd_set components
set(NJD_SET_SOURCES
  njd_set_accent_phrase/njd_set_accent_phrase.c
  njd_set_accent_type/njd_set_accent_type.c
  njd_set_digit/njd_set_digit.c
  njd_set_long_vowel/njd_set_long_vowel.c
  njd_set_pronunciation/njd_set_pronunciation.c
  njd_set_unvoiced_vowel/njd_set_unvoiced_vowel.c
)

# Source files for jpcommon
set(JPCOMMON_SOURCES
  jpcommon/jpcommon.c
  jpcommon/jpcommon_label.c
  jpcommon/jpcommon_node.c
)

# Source files for text2mecab
set(TEXT2MECAB_SOURCES
  text2mecab/text2mecab.c
)

# Source files for mecab2njd
set(MECAB2NJD_SOURCES
  mecab2njd/mecab2njd.c
)

# Source files for njd2jpcommon
set(NJD2JPCOMMON_SOURCES
  njd2jpcommon/njd2jpcommon.c
)

# Create mecab library with C++14
add_library(mecab STATIC ${MECAB_SOURCES})
set_property(TARGET mecab PROPERTY CXX_STANDARD 14)
set_property(TARGET mecab PROPERTY CXX_STANDARD_REQUIRED ON)

target_include_directories(mecab PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/mecab/src
  ${CMAKE_CURRENT_SOURCE_DIR}
)

# Mecab definitions for Emscripten
target_compile_definitions(mecab PRIVATE
  DIC_VERSION=102
  PACKAGE="open_jtalk"
  VERSION="${OPEN_JTALK_VERSION}"
  CHARSET_UTF_8
  HAVE_UNISTD_H
  HAVE_DIRENT_H
  HAVE_FCNTL_H
  HAVE_SYS_STAT_H
  HAVE_SYS_TYPES_H
  HAVE_STDINT_H
  HAVE_INTTYPES_H
  MECAB_DEFAULT_RC=""
)

# Create OpenJTalk library
add_library(openjtalk STATIC
  ${NJD_SOURCES}
  ${NJD_SET_SOURCES}
  ${JPCOMMON_SOURCES}
  ${TEXT2MECAB_SOURCES}
  ${MECAB2NJD_SOURCES}
  ${NJD2JPCOMMON_SOURCES}
)

target_include_directories(openjtalk PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/njd
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_accent_phrase
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_accent_type
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_digit
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_long_vowel
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_pronunciation
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_unvoiced_vowel
  ${CMAKE_CURRENT_SOURCE_DIR}/njd2jpcommon
  ${CMAKE_CURRENT_SOURCE_DIR}/jpcommon
  ${CMAKE_CURRENT_SOURCE_DIR}/text2mecab
  ${CMAKE_CURRENT_SOURCE_DIR}/mecab2njd
  ${CMAKE_CURRENT_SOURCE_DIR}/mecab/src
)

target_compile_definitions(openjtalk PRIVATE
  CHARSET_UTF_8
  ASCII_HEADER
)

target_link_libraries(openjtalk PUBLIC mecab)

# Add math library
target_link_libraries(openjtalk PUBLIC m)
EOF

# Apply C++17 compatibility patch (in case compiler defaults to C++17)
WORKDIR /build/open_jtalk-1.11

# Fix dictionary.cpp for C++17 compatibility
RUN cat > dictionary.patch << 'EOF'
--- a/mecab/src/dictionary.cpp
+++ b/mecab/src/dictionary.cpp
@@ -78,9 +78,16 @@
 
 namespace {
 template <typename T1, typename T2>
+#if __cplusplus >= 201703L
+struct pair_1st_cmp {
+  typedef T1 first_argument_type;
+  typedef T2 second_argument_type;
+  typedef bool result_type;
+#else
 struct pair_1st_cmp: public std::binary_function<bool, T1, T2> {
+#endif
   bool operator()(const std::pair<T1, T2> &x1,
                   const std::pair<T1, T2> &x2) {
     return x1.first < x2.first;
   }
 };
EOF

RUN patch -p1 -N < dictionary.patch || true

# Build OpenJTalk with CMake and Emscripten
RUN emcmake cmake . \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=14 \
    -DCMAKE_CXX_STANDARD_REQUIRED=ON \
    && emmake make -j$(nproc)

# Create WASM wrapper
WORKDIR /build
COPY openjtalk_wasm_piper.c /build/

# Prepare dictionary data
RUN mkdir -p dict_data \
    && cp open_jtalk_dic_utf_8-1.11/*.bin dict_data/ \
    && cp open_jtalk_dic_utf_8-1.11/*.dic dict_data/ \
    && cp open_jtalk_dic_utf_8-1.11/*.def dict_data/

# Build WASM module with proper linking order (using forward declarations, no headers needed)
RUN emcc openjtalk_wasm_piper.c \
    -o openjtalk-unity-full.js \
    /build/open_jtalk-1.11/libopenjtalk.a \
    /build/open_jtalk-1.11/libmecab.a \
    -s EXPORTED_FUNCTIONS='["_malloc","_free","_Open_JTalk_initialize","_Open_JTalk_load","_Open_JTalk_synthesis","_Open_JTalk_clear","_allocate_memory","_free_memory","_get_string_length","_get_version"]' \
    -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap","UTF8ToString","stringToUTF8","FS"]' \
    -s MODULARIZE=1 \
    -s EXPORT_NAME='OpenJTalkModule' \
    -s ALLOW_MEMORY_GROWTH=1 \
    -s INITIAL_MEMORY=134217728 \
    -s FILESYSTEM=1 \
    -s FORCE_FILESYSTEM=1 \
    --preload-file dict_data@/dict \
    -O2 \
    -lm \
    -lstdc++

# Test the build
RUN node -e "console.log('Testing Node.js availability...')" || echo "Node.js test failed"

CMD ["sh", "-c", "cp openjtalk-unity-full.* /output/ 2>/dev/null || echo 'Files copied'"]