// Auto-generated from Flite LTS data
// Generated on: 2025-01-29
// DO NOT EDIT - This file is automatically generated

using System;

namespace uPiper.Core.Phonemizers.Backend.Flite
{
    /// <summary>
    /// Flite LTS data extracted from CMU Flite source
    /// </summary>
    public static class FliteLTSData
    {
        /// <summary>
        /// Phone table containing all possible phones (75 entries)
        /// </summary>
        public static readonly string[] PhoneTable = new[]
        {
            "epsilon", "eh1", "aa1", "ey1", "aw1", "ax0", "ao1", "ay0",
            "aa0", "ey0", "ae1", "ih1", "aw0", "ow0", "ao0", "ow1",
            "eh0", "ih0", "w-ey1", "w-ax0", "y-ax0", "ae0", "ay1", "ah0",
            "ah1", "b", "ch", "k", "s", "t-s", "sh", "d",
            "t", "jh", "iy1", "iy0", "uw1", "y-uw1", "oy1", "y-uw0",
            "uw0", "oy0", "f", "g", "zh", "hh", "y", "l",
            "ax0-l", "m", "ax0-m", "m-ae1", "m-ax0", "ng", "n", "n-y",
            "uh1", "uh0", "w", "w-ah1", "er1", "p", "r", "er0",
            "z", "th", "dh", "y-er0", "y-uh1", "y-er1", "v", "k-s",
            "g-zh", "k-sh", "g-z"
        };

        /// <summary>
        /// Letter table for LTS rules (29 entries)
        /// </summary>
        public static readonly string[] LetterTable = new[]
        {
            "nothing", "#", "0", "a", "b", "c", "d", "e",
            "f", "g", "h", "i", "j", "k", "l", "m",
            "n", "o", "p", "q", "r", "s", "t", "u",
            "v", "w", "x", "y", "z"
        };

        /// <summary>
        /// Letter index for quick lookups (26 letters + terminator)
        /// Maps each letter (a-z) to an offset in the rule data
        /// </summary>
        public static readonly int[] LetterIndex = new[]
        {
            0, 5371, 5414, 6048, 6256, 10649, 10666, 11293,
            11522, 15403, 15514, 15533, 15900, 15942, 16176, 19793,
            19830, 19831, 21775, 22667, 22957, 24709, 24719, 24877,
            24923, 25377, 0
        };

        /// <summary>
        /// Total number of phones
        /// </summary>
        public const int PhoneCount = 75;

        /// <summary>
        /// Total number of letters
        /// </summary>
        public const int LetterCount = 29;

        /// <summary>
        /// Get phone index by name
        /// </summary>
        public static int GetPhoneIndex(string phone)
        {
            for (int i = 0; i < PhoneTable.Length; i++)
            {
                if (PhoneTable[i] == phone)
                    return i;
            }
            return -1;
        }

        /// <summary>
        /// Get letter index (0-based) for a character
        /// </summary>
        public static int GetLetterIndex(char letter)
        {
            if (letter >= 'a' && letter <= 'z')
                return letter - 'a';
            if (letter >= 'A' && letter <= 'Z')
                return letter - 'A';
            return -1;
        }

        /// <summary>
        /// Get rule data offset for a letter
        /// </summary>
        public static int GetRuleOffset(char letter)
        {
            int index = GetLetterIndex(letter);
            if (index >= 0 && index < LetterIndex.Length - 1)
                return LetterIndex[index];
            return -1;
        }
    }
}