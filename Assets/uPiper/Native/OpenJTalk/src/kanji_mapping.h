#ifndef KANJI_MAPPING_H
#define KANJI_MAPPING_H

// Basic kanji to reading mapping for common characters
// This is a simplified approach without full morphological analysis

typedef struct {
    const char* kanji;
    const char* reading;  // Hiragana reading
} KanjiMapping;

// Common kanji mappings (expandable)
static const KanjiMapping kanji_table[] = {
    // Numbers
    {"一", "いち"},
    {"二", "に"},
    {"三", "さん"},
    {"四", "よん"},
    {"五", "ご"},
    {"六", "ろく"},
    {"七", "なな"},
    {"八", "はち"},
    {"九", "きゅう"},
    {"十", "じゅう"},
    {"百", "ひゃく"},
    {"千", "せん"},
    {"万", "まん"},
    
    // Time
    {"日", "にち"},
    {"月", "つき"},
    {"年", "ねん"},
    {"時", "じ"},
    {"分", "ふん"},
    {"秒", "びょう"},
    {"今", "いま"},
    {"朝", "あさ"},
    {"昼", "ひる"},
    {"夜", "よる"},
    {"明日", "あした"},
    {"昨日", "きのう"},
    {"今日", "きょう"},
    
    // Common words
    {"人", "ひと"},
    {"子", "こ"},
    {"女", "おんな"},
    {"男", "おとこ"},
    {"名", "な"},
    {"前", "まえ"},
    {"後", "あと"},
    {"上", "うえ"},
    {"下", "した"},
    {"中", "なか"},
    {"外", "そと"},
    {"左", "ひだり"},
    {"右", "みぎ"},
    {"東", "ひがし"},
    {"西", "にし"},
    {"南", "みなみ"},
    {"北", "きた"},
    
    // Nature
    {"山", "やま"},
    {"川", "かわ"},
    {"海", "うみ"},
    {"空", "そら"},
    {"雨", "あめ"},
    {"雪", "ゆき"},
    {"風", "かぜ"},
    {"水", "みず"},
    {"火", "ひ"},
    {"土", "つち"},
    {"木", "き"},
    {"金", "きん"},
    
    // Actions
    {"見", "み"},
    {"聞", "き"},
    {"言", "い"},
    {"話", "はな"},
    {"読", "よ"},
    {"書", "か"},
    {"行", "い"},
    {"来", "き"},
    {"帰", "かえ"},
    {"食", "た"},
    {"飲", "の"},
    {"立", "た"},
    {"座", "すわ"},
    {"歩", "ある"},
    {"走", "はし"},
    {"作", "つく"},
    {"使", "つか"},
    {"持", "も"},
    {"待", "ま"},
    {"思", "おも"},
    {"考", "かんが"},
    {"知", "し"},
    {"分", "わ"},
    
    // Common compounds
    {"日本", "にほん"},
    {"日本語", "にほんご"},
    {"世界", "せかい"},
    {"会社", "かいしゃ"},
    {"学校", "がっこう"},
    {"先生", "せんせい"},
    {"学生", "がくせい"},
    {"友達", "ともだち"},
    {"家族", "かぞく"},
    {"仕事", "しごと"},
    {"時間", "じかん"},
    {"場所", "ばしょ"},
    {"問題", "もんだい"},
    {"質問", "しつもん"},
    {"答", "こた"},
    {"電話", "でんわ"},
    {"電車", "でんしゃ"},
    {"自動車", "じどうしゃ"},
    {"飛行機", "ひこうき"},
    {"新聞", "しんぶん"},
    {"本", "ほん"},
    {"音楽", "おんがく"},
    {"映画", "えいが"},
    {"写真", "しゃしん"},
    {"料理", "りょうり"},
    {"天気", "てんき"},
    {"元気", "げんき"},
    {"大丈夫", "だいじょうぶ"},
    {"有難", "ありがと"},
    {"御座", "ござ"},
    
    // Adjectives
    {"大", "おお"},
    {"小", "ちい"},
    {"新", "あたら"},
    {"古", "ふる"},
    {"良", "よ"},
    {"悪", "わる"},
    {"高", "たか"},
    {"安", "やす"},
    {"長", "なが"},
    {"短", "みじか"},
    {"広", "ひろ"},
    {"狭", "せま"},
    {"早", "はや"},
    {"遅", "おそ"},
    {"多", "おお"},
    {"少", "すく"},
    {"強", "つよ"},
    {"弱", "よわ"},
    {"美", "うつく"},
    {"楽", "たの"},
    {"難", "むずか"},
    {"易", "やさ"},
    
    // Colors
    {"赤", "あか"},
    {"青", "あお"},
    {"黄", "き"},
    {"緑", "みどり"},
    {"黒", "くろ"},
    {"白", "しろ"},
    {"色", "いろ"},
    
    // Body parts
    {"目", "め"},
    {"耳", "みみ"},
    {"口", "くち"},
    {"鼻", "はな"},
    {"手", "て"},
    {"足", "あし"},
    {"頭", "あたま"},
    {"顔", "かお"},
    {"体", "からだ"},
    {"心", "こころ"},
    
    // Family
    {"父", "ちち"},
    {"母", "はは"},
    {"兄", "あに"},
    {"姉", "あね"},
    {"弟", "おとうと"},
    {"妹", "いもうと"},
    {"祖父", "そふ"},
    {"祖母", "そぼ"},
    
    // Places
    {"国", "くに"},
    {"町", "まち"},
    {"村", "むら"},
    {"市", "し"},
    {"県", "けん"},
    {"家", "いえ"},
    {"店", "みせ"},
    {"駅", "えき"},
    {"病院", "びょういん"},
    {"銀行", "ぎんこう"},
    {"公園", "こうえん"},
    {"図書館", "としょかん"},
    
    // Education
    {"大学", "だいがく"},
    {"高校", "こうこう"},
    {"中学", "ちゅうがく"},
    {"小学校", "しょうがっこう"},
    {"勉強", "べんきょう"},
    {"授業", "じゅぎょう"},
    {"宿題", "しゅくだい"},
    {"試験", "しけん"},
    
    // Technology
    {"電気", "でんき"},
    {"機械", "きかい"},
    {"自動", "じどう"},
    {"情報", "じょうほう"},
    {"通信", "つうしん"},
    {"画面", "がめん"},
    {"音声", "おんせい"},
    {"合成", "ごうせい"},
    
    // End marker
    {NULL, NULL}
};

// Utility function to find kanji reading
static inline const char* find_kanji_reading(const char* kanji) {
    for (int i = 0; kanji_table[i].kanji != NULL; i++) {
        if (strcmp(kanji_table[i].kanji, kanji) == 0) {
            return kanji_table[i].reading;
        }
    }
    return NULL;
}

// Check if a character is likely kanji (simplified check)
static inline bool is_kanji_char(const char* str) {
    unsigned char c1 = (unsigned char)str[0];
    unsigned char c2 = (unsigned char)str[1];
    unsigned char c3 = (unsigned char)str[2];
    
    // Basic CJK Unified Ideographs range (U+4E00 to U+9FFF)
    // UTF-8: E4 B8 80 to E9 BF BF
    if (c1 == 0xE4 && c2 >= 0xB8 && c2 <= 0xBF) return true;
    if (c1 >= 0xE5 && c1 <= 0xE9) return true;
    
    // CJK Extension A (U+3400 to U+4DBF)
    // UTF-8: E3 90 80 to E4 B6 BF
    if (c1 == 0xE3 && c2 >= 0x90) return true;
    if (c1 == 0xE4 && c2 < 0xB8) return true;
    
    return false;
}

#endif // KANJI_MAPPING_H