using System.Collections;
using System.Linq;
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using uPiper.Core.Phonemizers.Backend.Chinese;

namespace uPiper.Tests.Runtime.ChinesePhonemizer
{
    /// <summary>
    /// Tests for multi-tone character processing
    /// </summary>
    public class MultiToneProcessorTests
    {
        private MultiToneProcessor processor;
        private ChinesePinyinDictionary dictionary;

        [UnitySetUp]
        public IEnumerator SetUp()
        {
            // Use cached fallback dictionary
            dictionary = ChineseDictionaryTestCache.GetDictionary();
            processor = new MultiToneProcessor(dictionary);
            yield return null;
        }

        [Test]
        public void MultiToneProcessor_ShouldInitialize()
        {
            Assert.IsNotNull(processor);
            
            var stats = processor.GetStatistics();
            Debug.Log($"[MultiToneTest] Statistics:");
            Debug.Log($"  Total multi-tone characters: {stats.TotalMultiToneCharacters}");
            Debug.Log($"  Characters with rules: {stats.CharactersWithRules}");
            Debug.Log($"  Total rules: {stats.TotalRules}");
            
            Assert.Greater(stats.CharactersWithRules, 0, "Should have some rules defined");
        }

        [Test]
        public void ToneSandhi_Bu_ShouldChange()
        {
            // Test ‰∏ç tone sandhi
            var testCases = new[]
            {
                // ‰∏ç + 4th tone ‚Üí bu2
                (new PronunciationContext { Character = '‰∏ç', NextTone = 4 }, "bu2"),
                // ‰∏ç + other tones ‚Üí bu4
                (new PronunciationContext { Character = '‰∏ç', NextTone = 1 }, "bu4"),
                (new PronunciationContext { Character = '‰∏ç', NextTone = 2 }, "bu4"),
                (new PronunciationContext { Character = '‰∏ç', NextTone = 3 }, "bu4"),
                (new PronunciationContext { Character = '‰∏ç' }, "bu4") // No context
            };

            foreach (var (context, expected) in testCases)
            {
                var result = processor.GetBestPronunciation('‰∏ç', context);
                Assert.AreEqual(expected, result, 
                    $"‰∏ç with next tone {context.NextTone} should be {expected}");
            }
        }

        [Test]
        public void ToneSandhi_Yi_ShouldChange()
        {
            // Test ‰∏Ä tone sandhi
            var testCases = new[]
            {
                // ‰∏Ä + 4th tone ‚Üí yi2
                (new PronunciationContext { Character = '‰∏Ä', NextTone = 4 }, "yi2"),
                // ‰∏Ä + 1st/2nd/3rd tone ‚Üí yi4
                (new PronunciationContext { Character = '‰∏Ä', NextTone = 1 }, "yi4"),
                (new PronunciationContext { Character = '‰∏Ä', NextTone = 2 }, "yi4"),
                (new PronunciationContext { Character = '‰∏Ä', NextTone = 3 }, "yi4"),
                // Default
                (new PronunciationContext { Character = '‰∏Ä' }, "yi1")
            };

            foreach (var (context, expected) in testCases)
            {
                var result = processor.GetBestPronunciation('‰∏Ä', context);
                Assert.AreEqual(expected, result, 
                    $"‰∏Ä with next tone {context.NextTone} should be {expected}");
            }
        }

        [Test]
        public void MultiTone_De_ShouldSelectByContext()
        {
            // Test ÁöÑ pronunciation selection
            var testCases = new[]
            {
                // ÁöÑÁ°Æ ‚Üí di2
                (new PronunciationContext { Character = 'ÁöÑ', NextChar = 'Á°Æ' }, "di2"),
                // ÁõÆÁöÑ ‚Üí di4
                (new PronunciationContext { Character = 'ÁöÑ', PrevChar = 'ÁõÆ' }, "di4"),
                // Default possessive ‚Üí de5
                (new PronunciationContext { Character = 'ÁöÑ' }, "de5")
            };

            foreach (var (context, expected) in testCases)
            {
                var result = processor.GetBestPronunciation('ÁöÑ', context);
                Assert.AreEqual(expected, result, 
                    $"ÁöÑ in context should be {expected}");
            }
        }

        [Test]
        public void MultiTone_Le_ShouldSelectByContext()
        {
            // Test ‰∫Ü pronunciation selection
            var testCases = new[]
            {
                // ‰∫ÜËß£ ‚Üí liao3
                (new PronunciationContext { Character = '‰∫Ü', NextChar = 'Ëß£' }, "liao3"),
                // ‰∏∫‰∫Ü ‚Üí liao3
                (new PronunciationContext { Character = '‰∫Ü', PrevChar = '‰∏∫' }, "liao3"),
                // Default aspectual particle ‚Üí le5
                (new PronunciationContext { Character = '‰∫Ü' }, "le5")
            };

            foreach (var (context, expected) in testCases)
            {
                var result = processor.GetBestPronunciation('‰∫Ü', context);
                Assert.AreEqual(expected, result, 
                    $"‰∫Ü in context should be {expected}");
            }
        }

        [Test]
        public void MultiTone_Xing_ShouldSelectByContext()
        {
            // Test Ë°å pronunciation selection
            var testCases = new[]
            {
                // Èì∂Ë°å ‚Üí hang2
                (new PronunciationContext { Character = 'Ë°å', PrevChar = 'Èì∂' }, "hang2"),
                // Ë°å‰∏ö ‚Üí hang2
                (new PronunciationContext { Character = 'Ë°å', NextChar = '‰∏ö' }, "hang2"),
                // Default (to walk, OK) ‚Üí xing2
                (new PronunciationContext { Character = 'Ë°å' }, "xing2")
            };

            foreach (var (context, expected) in testCases)
            {
                var result = processor.GetBestPronunciation('Ë°å', context);
                Assert.AreEqual(expected, result, 
                    $"Ë°å in context should be {expected}");
            }
        }

        [Test]
        public void IsMultiTone_ShouldIdentifyCorrectly()
        {
            // Characters that should be multi-tone
            var multiToneChars = new[] { 'ÁöÑ', '‰∫Ü', 'ÁùÄ', '‰∏ç', '‰∏Ä' };
            foreach (var ch in multiToneChars)
            {
                Assert.IsTrue(processor.IsMultiTone(ch), 
                    $"{ch} should be identified as multi-tone");
            }
            
            // Test some single-tone characters (if they exist in fallback dict)
            var singleToneChars = new[] { '‰Ω†', 'Â•Ω' };
            foreach (var ch in singleToneChars)
            {
                if (dictionary.TryGetCharacterPinyin(ch, out var pinyin) && pinyin.Length == 1)
                {
                    Assert.IsFalse(processor.IsMultiTone(ch), 
                        $"{ch} should not be multi-tone");
                }
            }
        }

        [Test]
        public void GetBestPronunciation_ShouldHandleUnknownCharacters()
        {
            var unknownChar = 'üåü'; // Emoji, not in dictionary
            var context = new PronunciationContext { Character = unknownChar };
            
            var result = processor.GetBestPronunciation(unknownChar, context);
            Assert.IsNull(result, "Unknown characters should return null");
        }

        [Test]
        public void ComplexContext_ShouldWork()
        {
            // Test complex phrase: "‰∏çË°å" (b√π x√≠ng - "no good")
            var context1 = new PronunciationContext 
            { 
                Character = '‰∏ç',
                NextChar = 'Ë°å',
                NextTone = 2  // xing2
            };
            
            var result1 = processor.GetBestPronunciation('‰∏ç', context1);
            Assert.AreEqual("bu4", result1, "‰∏ç before xing2 should be bu4");
            
            // Test: "‰∏ÄË°å" (y√¨ h√°ng - "one row")
            var context2 = new PronunciationContext
            {
                Character = 'Ë°å',
                PrevChar = '‰∏Ä'
            };
            
            var result2 = processor.GetBestPronunciation('Ë°å', context2);
            // Should be hang2 based on context
            Debug.Log($"[MultiToneTest] ‰∏ÄË°å: Ë°å pronounced as {result2}");
        }
    }
}