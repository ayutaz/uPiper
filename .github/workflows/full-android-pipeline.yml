name: Full Android Build Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*android*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  # Step 1: Build native libraries for all Android ABIs
  build-native-android:
    name: Build Native Android Libraries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86, x86_64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Native Libraries
      run: |
        cd NativePlugins/OpenJTalk
        
        # Build Docker image with cache
        docker buildx build \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          -f Dockerfile.android \
          -t openjtalk-android \
          --load .
        
        # Build for specific ABI
        docker run --rm -v "${PWD}:/workspace" -w /workspace openjtalk-android bash -c "
          chmod +x *.sh
          dos2unix *.sh
          
          # Fetch dependencies if needed
          if [ ! -d external/open_jtalk-1.11 ]; then
            ./fetch_dependencies.sh
          fi
          
          # Build only this ABI
          export TARGET_ABI=${{ matrix.abi }}
          # Use simplified script for CI/CD
          if [ -f build_android_simple.sh ]; then
            ./build_android_simple.sh
          elif [ -f build_android.sh ]; then
            sed -i 's/ABIS=.*/ABIS=(\"${{ matrix.abi }}\")/' build_android.sh
            ./build_android.sh
          else
            echo "ERROR: No Android build script found"
            exit 1
          fi
          
          # The build script already creates the library in output/android/${{ matrix.abi }}
          # Just verify it exists
          if [ ! -f output/android/${{ matrix.abi }}/libopenjtalk_wrapper.so ]; then
            echo "ERROR: Build failed, library not found"
            exit 1
          fi
          
          # Optimize size
          /opt/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
            --strip-unneeded output/android/${{ matrix.abi }}/libopenjtalk_wrapper.so
        "
    
    - name: Verify Library
      run: |
        cd NativePlugins/OpenJTalk
        ls -la output/android/${{ matrix.abi }}/
        file output/android/${{ matrix.abi }}/libopenjtalk_wrapper.so
        
        # Check symbols
        docker run --rm -v "${PWD}:/workspace" -w /workspace openjtalk-android bash -c "
          /opt/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm -D \
            output/android/${{ matrix.abi }}/libopenjtalk_wrapper.so | grep openjtalk_ | head -5
        "
    
    - name: Upload Native Library
      uses: actions/upload-artifact@v4
      with:
        name: native-android-${{ matrix.abi }}
        path: NativePlugins/OpenJTalk/output/android/${{ matrix.abi }}/*.so
        retention-days: 7

  # Step 2: Build Unity Android APK with native libraries
  build-unity-android:
    name: Build Unity Android APK
    needs: build-native-android
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Download All Native Libraries
      uses: actions/download-artifact@v4
      with:
        pattern: native-android-*
        path: native-libs
    
    - name: Setup Native Libraries in Unity Project
      run: |
        # Create Android plugin directory structure
        mkdir -p Assets/uPiper/Plugins/Android/libs/arm64-v8a
        mkdir -p Assets/uPiper/Plugins/Android/libs/armeabi-v7a
        mkdir -p Assets/uPiper/Plugins/Android/libs/x86
        mkdir -p Assets/uPiper/Plugins/Android/libs/x86_64
        
        # Copy native libraries to Unity project
        cp native-libs/native-android-arm64-v8a/*.so Assets/uPiper/Plugins/Android/libs/arm64-v8a/
        cp native-libs/native-android-armeabi-v7a/*.so Assets/uPiper/Plugins/Android/libs/armeabi-v7a/
        cp native-libs/native-android-x86/*.so Assets/uPiper/Plugins/Android/libs/x86/
        cp native-libs/native-android-x86_64/*.so Assets/uPiper/Plugins/Android/libs/x86_64/
        
        # List files to verify
        echo "=== Native libraries in Unity project ==="
        find Assets/uPiper/Plugins/Android -name "*.so" -exec ls -la {} \;
    
    - name: Cache Unity Library
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-Android-
          Library-
    
    - name: Build Unity Android Project
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.35f1
        targetPlatform: Android
        buildName: uPiper
        buildsPath: build
        androidAppBundle: false
        androidKeystoreName: ''
        androidKeystorePass: ''
        androidKeyaliasName: ''
        androidKeyaliasPass: ''
        androidTargetSdkVersion: AndroidApiLevel33
    
    - name: Verify APK Contents
      run: |
        cd build/Android
        
        # Check APK size
        ls -lh *.apk
        
        # Extract and verify native libraries
        unzip -l *.apk | grep -E "(libopenjtalk_wrapper|libc\+\+_shared)\.so"
        
        # Extract libraries for detailed check
        unzip *.apk "lib/*" || true
        echo "=== Extracted native libraries ==="
        find lib -name "*.so" -exec file {} \;
        
        # Check all ABIs are included
        for abi in arm64-v8a armeabi-v7a x86 x86_64; do
          if [ -f "lib/$abi/libopenjtalk_wrapper.so" ]; then
            echo "✓ Found library for $abi"
          else
            echo "✗ Missing library for $abi"
          fi
        done
    
    - name: Upload Unity APK
      uses: actions/upload-artifact@v4
      with:
        name: uPiper-Android-APK
        path: build/Android/*.apk
        retention-days: 7

  # Step 3: Test on Android devices/emulators
  test-android:
    name: Test Android APK
    needs: build-unity-android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [29, 33]
        arch: [x86_64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: uPiper-Android-APK
        path: apk
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}-${{ matrix.arch }}
    
    - name: Create AVD and generate snapshot
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        arch: ${{ matrix.arch }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        disable-animations: false
        script: echo "Generated AVD snapshot"
    
    - name: Run Tests on Emulator
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        arch: ${{ matrix.arch }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        disable-animations: true
        script: |
          # Install APK
          adb install apk/*.apk
          
          # Get package name
          PACKAGE=$(aapt dump badging apk/*.apk | grep package | awk '{print $2}' | sed s/name=//g | sed s/\'//g)
          echo "Package: $PACKAGE"
          
          # Launch app
          adb shell am start -n "$PACKAGE/.MainActivity"
          
          # Wait for app to start
          sleep 10
          
          # Check if app is running
          adb shell ps | grep "$PACKAGE"
          
          # Check for crashes
          adb logcat -d | grep -E "(FATAL|crash|tombstone)" | grep "$PACKAGE" || echo "No crashes detected"
          
          # Check for native library loading
          adb logcat -d | grep -E "(dlopen|openjtalk|OpenJTalk)" | tail -20
          
          # Take screenshot
          adb shell screencap -p /sdcard/screenshot.png
          adb pull /sdcard/screenshot.png screenshot-api${{ matrix.api-level }}.png
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-test-results-api${{ matrix.api-level }}
        path: |
          screenshot-*.png
          logcat-*.txt

  # Summary job
  android-pipeline-summary:
    name: Android Pipeline Summary
    needs: [build-native-android, build-unity-android, test-android]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "# Android Build Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Build Status" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Native Libraries Build | ${{ needs.build-native-android.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unity APK Build | ${{ needs.build-unity-android.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Android Tests | ${{ needs.test-android.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Supported ABIs" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ arm64-v8a (64-bit ARM)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ armeabi-v7a (32-bit ARM)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ x86 (Intel Atom)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ x86_64 (Intel 64-bit)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- API Level 29 (Android 10)" >> $GITHUB_STEP_SUMMARY
        echo "- API Level 33 (Android 13)" >> $GITHUB_STEP_SUMMARY