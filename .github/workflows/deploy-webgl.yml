name: "Build and Deploy Unity WebGL"

on:
  push:
    branches:
      - main
      - feature/webgl-implementation
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-webgl:
    name: Build Unity WebGL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-WebGL-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-WebGL-
            Library-
      
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      
      - name: Build Unity WebGL
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: 6000.0.55f1
          targetPlatform: WebGL
          buildsPath: build
          buildName: Web
      
      - name: List build output
        run: |
          echo "Build complete. Listing output files:"
          ls -la build/WebGL/Web/ || echo "Build directory not found"
          
          # ファイルサイズチェック
          echo "Checking for large files (>50MB):"
          find build/WebGL/Web -type f -size +50M -exec ls -lh {} \; 2>/dev/null || echo "No large files found"
      
      - name: Process large files for GitHub Pages
        run: |
          # 大容量ファイル（>90MB）のチェック
          echo "Checking for large files..."
          
          if [ -d "build/WebGL/Web" ]; then
            echo "Files larger than 90MB:"
            find build/WebGL/Web -type f -size +90M -exec ls -lh {} \;
            
            # 90MBを超えるファイルがある場合は警告（GitHub Pagesは100MB制限）
            if find build/WebGL/Web -type f -size +90M | grep -q .; then
              echo "WARNING: Large files detected. These may fail on GitHub Pages (100MB limit)."
              echo "Consider using Git LFS or splitting the files in a future update."
            fi
          fi
      
      - name: Check build permissions
        run: |
          # ビルドディレクトリの権限を確認
          echo "Checking build directory permissions..."
          ls -ld build/WebGL/Web/ || true
          echo "Directory owner and permissions:"
          stat -c "%U:%G %a" build/WebGL/Web/ || true
          
          # ファイル一覧を確認
          echo "Build output directory contents:"
          ls -la build/WebGL/Web/ | head -20 || true
      
      - name: Upload WebGL Build
        uses: actions/upload-artifact@v4
        with:
          name: WebGL-Build
          path: build/WebGL/Web
          retention-days: 7

  deploy:
    name: Deploy to GitHub Pages
    needs: build-webgl
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download WebGL Build
        uses: actions/download-artifact@v4
        with:
          name: WebGL-Build
          path: ./public
      
      - name: Prepare for GitHub Pages
        run: |
          # .nojekyll ファイルを作成（_で始まるファイルを正しく配信）
          touch ./public/.nojekyll
          
          # gzipファイルを解凍（GitHub Pagesは.gzファイルを正しく配信できない）
          echo "Decompressing gzip files for GitHub Pages..."
          for file in ./public/Build/*.gz; do
            if [ -f "$file" ]; then
              echo "Decompressing: $file"
              gunzip -k "$file" || true  # -k: keep original file
            fi
          done
          
          # StreamingAssetsディレクトリの確認と修正
          echo "Checking StreamingAssets directory..."
          if [ -d "./public/StreamingAssets" ]; then
            echo "StreamingAssets found at root level"
            ls -la ./public/StreamingAssets/ | head -10
          elif [ -d "./public/Build/StreamingAssets" ]; then
            echo "StreamingAssets found in Build directory" 
            ls -la ./public/Build/StreamingAssets/ | head -10
          else
            echo "WARNING: StreamingAssets directory not found!"
            # ディレクトリ構造を調査
            echo "Directory structure:"
            find ./public -type d -name "*Stream*" 2>/dev/null || true
            find ./public -name "*.onnx*" -o -name "*.json" | head -20
          fi
          
          # index.htmlを修正して.gzを削除
          if [ -f "./public/index.html" ]; then
            echo "Updating index.html to use uncompressed files..."
            sed -i 's/\.data\.gz/\.data/g' ./public/index.html
            sed -i 's/\.framework\.js\.gz/\.framework\.js/g' ./public/index.html
            sed -i 's/\.wasm\.gz/\.wasm/g' ./public/index.html
          fi
          
          # ファイルサイズ確認
          echo "Checking file sizes in deployment..."
          find ./public -type f -size +50M -exec ls -lh {} \; || echo "No large files found"
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  test-deployment:
    name: Test Deployment
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Test deployed site
        run: |
          # デプロイされたサイトをテスト
          DEPLOY_URL="https://ayutaz.github.io/uPiper/"
          
          echo "Testing deployment at: $DEPLOY_URL"
          
          # HTTPステータスコードをチェック
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" "$DEPLOY_URL")
          
          if [ "$STATUS" -eq 200 ]; then
            echo "✅ Deployment successful! Site is accessible."
          else
            echo "⚠️ Site returned status code: $STATUS"
            echo "This might be normal if it's the first deployment."
          fi