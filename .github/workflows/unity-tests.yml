name: Unity Tests

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-native-libraries:
    name: Build Native Libraries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux-x64-libraries
          - os: windows-latest
            artifact-name: windows-x64-libraries
          - os: macos-latest
            artifact-name: macos-universal-libraries
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Windows build
    - name: Build on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cd Assets\uPiper\Native
        mkdir Build
        cd Build
        cmake .. -G "Visual Studio 17 2022" -A x64
        cmake --build . --config Release
        
        echo "=== Copying DLL to Plugins directory ==="
        cd ..\..\..
        if not exist Assets\uPiper\Plugins\Windows mkdir Assets\uPiper\Plugins\Windows
        copy Assets\uPiper\Native\Build\Release\*.dll Assets\uPiper\Plugins\Windows\ 2>nul
        copy Assets\uPiper\Native\Build\*.dll Assets\uPiper\Plugins\Windows\ 2>nul
        dir Assets\uPiper\Plugins\Windows\
    
    # Linux build
    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
    
    - name: Build on Linux
      if: runner.os == 'Linux'
      run: |
        cd Assets/uPiper/Native
        chmod +x build.sh
        ./build.sh
    
    # macOS build
    - name: Install Dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake ninja
    
    - name: Build on macOS
      if: runner.os == 'macOS'
      run: |
        cd Assets/uPiper/Native
        chmod +x build.sh
        ./build.sh
    
    - name: Upload Native Libraries
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: Assets/uPiper/Plugins/
        retention-days: 7

  test:
    name: Run Unity Tests
    needs: build-native-libraries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unity-version: [6000.0.35f1]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Download Native Libraries
      uses: actions/download-artifact@v4
      with:
        path: Assets/uPiper/Plugins
        pattern: '*-libraries'
        merge-multiple: true
        
    - name: Run tests
      uses: game-ci/unity-test-runner@v4
      id: tests
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: ${{ matrix.unity-version }}
        testMode: all
        artifactsPath: test-results
        coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport'
        customParameters: '-nographics'
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Test results
        path: test-results
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Coverage results
        path: coverage
        
  validate-models:
    name: Validate Model Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check model files
      run: |
        echo "Checking for model files..."
        ls -la Assets/StreamingAssets/uPiper/Models/
        
        # Check Japanese model
        if [ ! -f "Assets/StreamingAssets/uPiper/Models/ja_JP-test-medium.onnx" ]; then
          echo "ERROR: Japanese model not found!"
          exit 1
        fi
        
        # Check English model
        if [ ! -f "Assets/StreamingAssets/uPiper/Models/test_voice.onnx" ]; then
          echo "ERROR: English model not found!"
          exit 1
        fi
        
        # Check file sizes
        ja_size=$(stat -c%s "Assets/StreamingAssets/uPiper/Models/ja_JP-test-medium.onnx" 2>/dev/null || stat -f%z "Assets/StreamingAssets/uPiper/Models/ja_JP-test-medium.onnx")
        en_size=$(stat -c%s "Assets/StreamingAssets/uPiper/Models/test_voice.onnx" 2>/dev/null || stat -f%z "Assets/StreamingAssets/uPiper/Models/test_voice.onnx")
        
        echo "Japanese model size: $((ja_size / 1024 / 1024))MB"
        echo "English model size: $((en_size / 1024 / 1024))MB"
        
        # Validate sizes (should be non-zero)
        if [ "$ja_size" -eq 0 ] || [ "$en_size" -eq 0 ]; then
          echo "ERROR: Model files are empty!"
          exit 1
        fi
        
        echo "All model files validated successfully!"

  release-artifacts:
    name: Create Release Package
    needs: [build-native-libraries, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all native libraries
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: '*-libraries'
    
    - name: Create Unity Package
      run: |
        mkdir -p package/uPiper
        
        # Copy package contents
        cp -r Assets/uPiper/* package/uPiper/
        
        # Copy native libraries from artifacts
        mkdir -p package/uPiper/Plugins
        cp -r artifacts/*-libraries/* package/uPiper/Plugins/ || true
        
        # Create package.json
        cat > package/uPiper/package.json << EOF
        {
          "name": "com.ayutaz.upiper",
          "version": "0.1.0-alpha",
          "displayName": "uPiper TTS",
          "description": "Unity Text-to-Speech plugin using Piper with Japanese support",
          "unity": "6000.0",
          "dependencies": {
            "com.unity.sentis": "2.1.2"
          },
          "keywords": ["tts", "text-to-speech", "piper", "japanese", "audio"],
          "author": {
            "name": "ayutaz",
            "url": "https://github.com/ayutaz"
          }
        }
        EOF
        
        # Create archive
        cd package
        zip -r ../uPiper-Unity-Package.zip uPiper
        cd ..
    
    - name: Upload Unity Package
      uses: actions/upload-artifact@v4
      with:
        name: uPiper-Unity-Package
        path: uPiper-Unity-Package.zip
        retention-days: 30