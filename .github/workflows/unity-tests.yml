name: Unity Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Unity Test Runner
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Cache Library
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-
          
    # プロジェクト構造をデバッグ
    - name: Debug Project Structure
      run: |
        echo "Current directory: $(pwd)"
        echo "GitHub Workspace: ${{ github.workspace }}"
        echo "Directory contents:"
        ls -la
        echo ""
        echo "Assets directory:"
        ls -la Assets/ || echo "Assets directory not found"
        echo ""
        echo "ProjectSettings directory:"
        ls -la ProjectSettings/ || echo "ProjectSettings directory not found"
        echo ""
        echo "Test assemblies:"
        find Assets -name "*.asmdef" | grep -i test || echo "No test assemblies found"
        echo ""
        echo "Test scripts:"
        find Assets -name "*Test*.cs" | head -10 || echo "No test scripts found"
        
    # Unity 6対応 - game-ci/unity-test-runnerを使用
    - name: Run Unity Tests
      uses: game-ci/unity-test-runner@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        PROJECT_PATH: .
      with:
        unityVersion: 6000.0.35f1
        testMode: all
        artifactsPath: test-results
        githubToken: ${{ github.token }}
        checkName: Unity Test Results
        coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+uPiper.*,-uPiper.Tests.*'
        customParameters: '-enableCodeCoverage'
        
    # テスト結果をJUnit形式で保存
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Test Results - Unity
        path: |
          test-results/**/*.xml
          test-results/**/*.html
          test-results/**/*.json
        retention-days: 7
        
        
    # テスト結果のデバッグ情報
    - name: Debug Test Results
      if: always()
      run: |
        echo "=== Test Results Directory Contents ==="
        find test-results -type f -name "*.xml" | head -20
        
        echo ""
        echo "=== XML File Contents Sample ==="
        for file in test-results/*.xml test-results/**/*.xml; do
          if [ -f "$file" ]; then
            echo "File: $file"
            head -50 "$file" | grep -E "(test-suite|test-case|TestCase|TestSuite)" || echo "No test elements found"
            echo "---"
          fi
        done
    
    # テスト結果のサマリーを作成
    - name: Create Test Summary
      if: always()
      run: |
        echo "## Unity Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # テスト結果ファイルを検索
        echo "### Test Result Files" >> $GITHUB_STEP_SUMMARY
        find test-results -type f -name "*.xml" | while read file; do
          echo "- $file" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # XMLファイルから結果を抽出
        for file in test-results/*.xml test-results/**/*.xml; do
          if [ -f "$file" ]; then
            echo "### $(basename $file .xml)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # 簡易的な結果表示（XMLパース）
            if command -v xmllint &> /dev/null; then
              total=$(xmllint --xpath "count(//test-case)" "$file" 2>/dev/null || echo "0")
              passed=$(xmllint --xpath "count(//test-case[@result='Passed'])" "$file" 2>/dev/null || echo "0")
              failed=$(xmllint --xpath "count(//test-case[@result='Failed'])" "$file" 2>/dev/null || echo "0")
              
              # test-caseが見つからない場合、TestCaseも試す
              if [ "$total" = "0" ]; then
                total=$(xmllint --xpath "count(//TestCase)" "$file" 2>/dev/null || echo "0")
                passed=$(xmllint --xpath "count(//TestCase[@result='Passed'])" "$file" 2>/dev/null || echo "0")
                failed=$(xmllint --xpath "count(//TestCase[@result='Failed'])" "$file" 2>/dev/null || echo "0")
              fi
              
              echo "- Total Tests: $total" >> $GITHUB_STEP_SUMMARY
              echo "- Passed: $passed ✅" >> $GITHUB_STEP_SUMMARY
              echo "- Failed: $failed ❌" >> $GITHUB_STEP_SUMMARY
              
              # test-suiteの総数も表示
              suite_total=$(xmllint --xpath "//test-suite[@type='TestFixture']/@testcasecount" "$file" 2>/dev/null | sed 's/testcasecount="//g' | sed 's/"//g' | paste -sd+ | bc 2>/dev/null || echo "0")
              if [ "$suite_total" != "0" ]; then
                echo "- Test Suite Total: $suite_total" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "Test results found in: $file" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    # カバレッジレポートをアップロード
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Coverage Report
        path: |
          CodeCoverage/**
          test-results/**/CodeCoverage/**
        retention-days: 7
    
    # XMLパース用ツールをインストール
    - name: Install XML tools
      if: always()
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils bc
        
    # コードカバレッジチェック
    - name: Check Code Coverage
      if: always()
      run: |
        # カバレッジサマリーファイルを探す
        echo "=== Looking for coverage files ==="
        find . -name "*.xml" -type f | grep -i coverage || echo "No coverage files found"
        echo "=== Coverage directory structure ==="
        ls -la CodeCoverage/ 2>/dev/null || echo "CodeCoverage directory not found"
        
        # Unity Code CoverageはOpenCover形式のXMLを生成
        # game-ci/unity-test-runnerはワークスペース内に出力する
        coverage_file=$(find . -path "./CodeCoverage/*" -name "TestCoverageResults_*.xml" -type f | head -1)
        
        # ファイルが見つからない場合、test-resultsディレクトリ内も探す
        if [ -z "$coverage_file" ] || [ ! -f "$coverage_file" ]; then
          coverage_file=$(find test-results -name "*Coverage*.xml" -type f | head -1)
        fi
        
        # それでも見つからない場合、デフォルトパスを試す
        if [ -z "$coverage_file" ] || [ ! -f "$coverage_file" ]; then
          coverage_file="CodeCoverage/Report/Summary.xml"
        fi
        
        echo "Looking for coverage file: $coverage_file"
        
        if [ -f "$coverage_file" ]; then
          echo "### Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 Coverage file: \`$coverage_file\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # XMLからカバレッジ情報を抽出
          if command -v xmllint &> /dev/null; then
            # 名前空間を無視してXPathを使用
            line_coverage=$(xmllint --xpath "string(//*[local-name()='CoverageSession']/*[local-name()='Summary']/@sequenceCoverage)" "$coverage_file" 2>/dev/null || echo "")
            branch_coverage=$(xmllint --xpath "string(//*[local-name()='CoverageSession']/*[local-name()='Summary']/@branchCoverage)" "$coverage_file" 2>/dev/null || echo "")
            
            # 値が取得できない場合のデバッグ
            if [ -z "$line_coverage" ]; then
              echo "⚠️ Debug: Could not find coverage attributes" >> $GITHUB_STEP_SUMMARY
              echo "<details><summary>XML structure (first 30 lines)</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`xml" >> $GITHUB_STEP_SUMMARY
              xmllint --format "$coverage_file" 2>/dev/null | head -30 >> $GITHUB_STEP_SUMMARY || echo "Could not display XML" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              line_coverage="0"
            fi
            
            if [ -z "$branch_coverage" ]; then
              branch_coverage="0"
            fi
            
            # Unity Code Coverageは既にパーセンテージ形式なのでそのまま使用
            line_percent=$line_coverage
            branch_percent=$branch_coverage
            
            echo "📋 **Coverage Results:**" >> $GITHUB_STEP_SUMMARY
            echo "- **Line Coverage**: $line_percent%" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch Coverage**: $branch_percent%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # カバレッジが低い場合の警告
            if (( $(echo "$line_percent < 50" | bc -l) )); then
              echo "⚠️ **Warning**: Line coverage is below 50%" >> $GITHUB_STEP_SUMMARY
            fi
            
            # カバレッジバッジデータを環境変数に保存
            echo "LINE_COVERAGE=$line_percent" >> $GITHUB_ENV
            echo "BRANCH_COVERAGE=$branch_percent" >> $GITHUB_ENV
          else
            echo "❌ **Error**: xmllint not available, cannot parse coverage data" >> $GITHUB_STEP_SUMMARY
            echo "Please check if XML tools are properly installed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Error**: Coverage report not found" >> $GITHUB_STEP_SUMMARY
          echo "Expected location: $coverage_file" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Available coverage files:" >> $GITHUB_STEP_SUMMARY
          find . -name "*coverage*.xml" -o -name "*Coverage*.xml" | head -10 | while read f; do
            echo "- $f" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
    # Codecovにカバレッジをアップロード
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./
        files: 'CodeCoverage/**/*.xml'
        flags: unittests
        name: uPiper
        fail_ci_if_error: false
        verbose: true