name: Build and Deploy Unity WebGL

on:
  push:
    branches:
      - feature/webgl-implementation
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-webgl:
    name: Build Unity WebGL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-WebGL-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-WebGL-
            Library-
      
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      
      - name: Build Unity WebGL
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          unityVersion: 6000.0.55f1
          buildName: uPiper
          versioning: Semantic
      
      - name: Copy updated files to build
        run: |
          # 最新のonnx-runtime-wrapper.jsをコピー
          if [ -f "Assets/StreamingAssets/onnx-runtime-wrapper.js" ]; then
            cp Assets/StreamingAssets/onnx-runtime-wrapper.js build/WebGL/uPiper/StreamingAssets/
            echo "Updated onnx-runtime-wrapper.js"
          fi
          
          # テスト用HTMLもコピー
          if [ -f "Assets/StreamingAssets/test-deployment.html" ]; then
            cp Assets/StreamingAssets/test-deployment.html build/WebGL/uPiper/StreamingAssets/
            echo "Added test-deployment.html"
          fi
      
      - name: Upload WebGL Build
        uses: actions/upload-artifact@v3
        with:
          name: webgl-build
          path: build/WebGL

  deploy-pages:
    name: Deploy to GitHub Pages
    needs: build-webgl
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download WebGL Build
        uses: actions/download-artifact@v3
        with:
          name: webgl-build
          path: build
      
      - name: Prepare for GitHub Pages
        run: |
          # ビルドディレクトリを確認
          ls -la build/
          
          # index.htmlが正しい場所にあるか確認
          if [ -f "build/uPiper/index.html" ]; then
            echo "Found index.html in build/uPiper/"
            mv build/uPiper/* build/
          fi
          
          # _config.ymlを作成（Jekyll処理を無効化）
          echo "include: ['Build', 'TemplateData', 'StreamingAssets']" > build/_config.yml
          
          # .nojekyllファイルを作成
          touch build/.nojekyll
          
          # テスト用のランディングページを作成
          cat > build/test.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>uPiper WebGL Test</title>
</head>
<body>
    <h1>uPiper WebGL Deployment Test</h1>
    <ul>
        <li><a href="index.html">Main Unity WebGL App</a></li>
        <li><a href="StreamingAssets/test-deployment.html">Environment Test</a></li>
        <li><a href="StreamingAssets/test-cli.html">CLI Test</a></li>
    </ul>
    <p>Current URL: <script>document.write(window.location.href);</script></p>
    <p>Protocol: <script>document.write(window.location.protocol);</script></p>
    <p>Hostname: <script>document.write(window.location.hostname);</script></p>
</body>
</html>
EOF
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: build
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2