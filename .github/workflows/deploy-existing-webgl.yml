name: Deploy Existing WebGL Build

on:
  workflow_dispatch:
  push:
    branches:
      - feature/webgl-implementation
    paths:
      - 'Build/Web/**'
      - '.github/workflows/deploy-existing-webgl.yml'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: false  # LFS„Éï„Ç°„Ç§„É´„ÅØ‰∏çË¶Å
      
      - name: Prepare deployment directory
        run: |
          # „Éá„Éó„É≠„Ç§Áî®„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
          mkdir -p deploy
          
          # Build/Web„ÅÆÂÜÖÂÆπ„Çí„Ç≥„Éî„ÉºÔºàÂ§ßÂÆπÈáè„Éï„Ç°„Ç§„É´„ÇíÈô§Â§ñÔºâ
          if [ -d "Build/Web" ]; then
            echo "Copying WebGL build..."
            cp -r Build/Web/* deploy/
          else
            echo "Error: Build/Web directory not found!"
            exit 1
          fi
          
          # ÊúÄÊñ∞„ÅÆonnx-runtime-wrapper.js„Çí„Ç≥„Éî„Éº
          if [ -f "Assets/StreamingAssets/onnx-runtime-wrapper.js" ]; then
            cp Assets/StreamingAssets/onnx-runtime-wrapper.js deploy/StreamingAssets/
            echo "Updated onnx-runtime-wrapper.js"
          fi
          
          # „ÉÜ„Çπ„ÉàÁî®HTML„Éï„Ç°„Ç§„É´„Çí„Ç≥„Éî„Éº
          for file in Assets/StreamingAssets/test-*.html; do
            if [ -f "$file" ]; then
              cp "$file" deploy/StreamingAssets/
              echo "Copied $(basename $file)"
            fi
          done
          
          # Â§ßÂÆπÈáè„Éï„Ç°„Ç§„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ
          echo "Checking for large files..."
          find deploy -type f -size +50M -exec ls -lh {} \; | head -10
          
          # 100MB‰ª•‰∏ä„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§ÔºàGitHub PagesÂà∂ÈôêÔºâ
          find deploy -type f -size +100M -delete
          
          # .nojekyll„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
          touch deploy/.nojekyll
          
          # „ÉÜ„Çπ„ÉàÁî®„Éö„Éº„Ç∏„Çí‰ΩúÊàê
          cat > deploy/test.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>uPiper WebGL Test</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .local { background: #fff3cd; }
        .production { background: #d4edda; }
    </style>
</head>
<body>
    <h1>uPiper WebGL Deployment Test</h1>
    <div id="status" class="status"></div>
    <ul>
        <li><a href="index.html">üéÆ Unity WebGL App</a></li>
        <li><a href="StreamingAssets/test-deployment.html">üîç Environment Test</a></li>
        <li><a href="StreamingAssets/test-cli.html">‚ö° Quick Test</a></li>
    </ul>
    <script>
        const isLocal = window.location.hostname === 'localhost' || 
                       window.location.hostname === '127.0.0.1' || 
                       window.location.protocol === 'file:';
        const statusEl = document.getElementById('status');
        if (isLocal) {
            statusEl.className = 'status local';
            statusEl.innerHTML = '‚ö†Ô∏è Local Environment - length_scale adjustment will be applied';
        } else {
            statusEl.className = 'status production';
            statusEl.innerHTML = '‚úÖ Production Environment - No adjustment needed';
        }
        statusEl.innerHTML += '<br>URL: ' + window.location.href;
    </script>
</body>
</html>
EOF
          
          echo "Deployment directory prepared successfully"
          ls -la deploy/
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: deploy
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2