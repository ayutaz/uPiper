name: Locale Compatibility Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  locale-test:
    name: Unity Test Runner - ${{ matrix.os }} (${{ matrix.locale }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows with Japanese locale to test CultureInfo issues
          - os: windows-latest
            platform: Windows
            lib_ext: dll
            lib_prefix: ""
            lib_path: Windows/x86_64
            locale: ja-JP
            culture_test: true
          # Add more locale combinations as needed
          # - os: windows-latest
          #   platform: Windows
          #   lib_ext: dll
          #   lib_prefix: ""
          #   lib_path: Windows/x86_64
          #   locale: de-DE
          #   culture_test: true
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Set Windows Locale
      if: matrix.os == 'windows-latest' && matrix.culture_test
      run: |
        # Set current culture for PowerShell session
        [System.Threading.Thread]::CurrentThread.CurrentCulture = '${{ matrix.locale }}'
        [System.Threading.Thread]::CurrentThread.CurrentUICulture = '${{ matrix.locale }}'
        echo "DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false" >> $env:GITHUB_ENV
        echo "LC_ALL=${{ matrix.locale }}.UTF-8" >> $env:GITHUB_ENV
        echo "LANG=${{ matrix.locale }}.UTF-8" >> $env:GITHUB_ENV
        echo "Setting locale to ${{ matrix.locale }}"
      shell: powershell
        
    - name: Verify Locale Settings
      if: matrix.culture_test
      run: |
        echo "Current locale settings:"
        [System.Threading.Thread]::CurrentThread.CurrentCulture = '${{ matrix.locale }}'
        [System.Threading.Thread]::CurrentThread.CurrentUICulture = '${{ matrix.locale }}'
        echo "CurrentCulture: $([System.Threading.Thread]::CurrentThread.CurrentCulture)"
        echo "CurrentUICulture: $([System.Threading.Thread]::CurrentThread.CurrentUICulture)"
        # Test number formatting that caused issues
        $testNumber = 50.0
        echo "Test number formatting (50.0 as P0): '$($testNumber.ToString('P0'))'"
        echo "Test number formatting (50.0 as P0, InvariantCulture): '$($testNumber.ToString('P0', [System.Globalization.CultureInfo]::InvariantCulture))'"
      shell: powershell
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install CMake
      uses: lukka/get-cmake@latest
        
    - name: Build OpenJTalk Native Library
      run: |
        cd NativePlugins/OpenJTalk
        
        # Make build script executable
        chmod +x build_ci.sh
        
        # Build native library
        ./build_ci.sh
      shell: bash
      
    - name: Copy OpenJTalk Library
      run: |
        # Find and copy built library to Unity Plugins directory
        $targetDir = "Assets/uPiper/Plugins/${{ matrix.lib_path }}"
        $targetPath = "$targetDir/openjtalk_wrapper.${{ matrix.lib_ext }}"
        
        # Check multiple possible locations
        $possiblePaths = @(
          "NativePlugins/OpenJTalk/output/windows/openjtalk_wrapper.${{ matrix.lib_ext }}",
          "NativePlugins/OpenJTalk/output/openjtalk_wrapper.${{ matrix.lib_ext }}",
          "NativePlugins/OpenJTalk/build/bin/Release/openjtalk_wrapper.${{ matrix.lib_ext }}",
          "NativePlugins/OpenJTalk/build/bin/openjtalk_wrapper.${{ matrix.lib_ext }}"
        )
        
        $found = $false
        foreach ($sourcePath in $possiblePaths) {
          echo "Checking: $sourcePath"
          if (Test-Path $sourcePath) {
            echo "Found library at: $sourcePath"
            New-Item -ItemType Directory -Path $targetDir -Force
            Copy-Item $sourcePath $targetPath -Force
            echo "Library copied successfully to $targetPath"
            $found = $true
            break
          }
        }
        
        if (-not $found) {
          echo "ERROR: Library not found in any expected location"
          echo "Searched paths:"
          $possiblePaths | ForEach-Object { echo "  $_" }
          
          # List actual files to debug
          echo ""
          echo "Files in output directory:"
          if (Test-Path "NativePlugins/OpenJTalk/output") {
            Get-ChildItem -Path "NativePlugins/OpenJTalk/output" -Recurse -Filter "*.dll" | ForEach-Object { echo $_.FullName }
          }
          echo ""
          echo "Files in build directory:"
          if (Test-Path "NativePlugins/OpenJTalk/build") {
            Get-ChildItem -Path "NativePlugins/OpenJTalk/build" -Recurse -Filter "*.dll" | ForEach-Object { echo $_.FullName }
          }
          exit 1
        }
      shell: powershell

    - name: Cache Unity Library
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ matrix.os }}-${{ matrix.locale }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.os }}-${{ matrix.locale }}-
          Library-${{ matrix.os }}-
    
    # Create Unity cache directory for Windows
    - name: Create Unity Cache Directory (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        $cachePaths = @(
          "$env:USERPROFILE\AppData\Local\Unity\Caches",
          "$env:USERPROFILE\AppData\Local\Unity\Caches\bee",
          "$env:USERPROFILE\AppData\Local\Unity"
        )
        foreach ($path in $cachePaths) {
          if (!(Test-Path $path)) {
            New-Item -ItemType Directory -Force -Path $path | Out-Null
            Write-Host "Created directory: $path"
          }
        }
          
    # Install Unity on Windows
    - name: Install Unity Hub (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Write-Host "Installing Unity Hub..."
        $hubPath = "$env:TEMP\UnityHubSetup.exe"
        Invoke-WebRequest -Uri "https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.exe" -OutFile $hubPath
        
        # Silent install
        Start-Process -FilePath $hubPath -ArgumentList "/S" -Wait
        
        # Add Unity Hub to PATH
        $unityHubPath = "${env:ProgramFiles}\Unity Hub"
        echo "$unityHubPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    - name: Install Unity Editor (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Add Unity Hub to current session PATH
        $env:PATH = "${env:ProgramFiles}\Unity Hub;$env:PATH"
        
        # Install Unity 6000.0.55f1
        Write-Host "Installing Unity 6000.0.55f1..."
        & "${env:ProgramFiles}\Unity Hub\Unity Hub.exe" -- --headless install --version 6000.0.55f1 --changeset bb8081de9a21
        
        # Wait for installation with progress checking
        Write-Host "Waiting for Unity installation to complete..."
        $maxWaitTime = 900  # 15 minutes maximum
        $checkInterval = 30  # Check every 30 seconds
        $elapsed = 0
        
        $unityPaths = @(
          "${env:ProgramFiles}\Unity\Hub\Editor\6000.0.55f1\Editor\Unity.exe",
          "${env:ProgramFiles}\Unity\6000.0.55f1\Editor\Unity.exe",
          "C:\Program Files\Unity\Hub\Editor\6000.0.55f1\Editor\Unity.exe"
        )
        
        $foundUnity = $false
        while ($elapsed -lt $maxWaitTime -and -not $foundUnity) {
          Start-Sleep -Seconds $checkInterval
          $elapsed += $checkInterval
          
          Write-Host "Checking for Unity installation... ($elapsed seconds elapsed)"
          
          foreach ($path in $unityPaths) {
            if (Test-Path $path) {
              Write-Host "Unity found at: $path"
              $foundUnity = $true
              break
            }
          }
        }
        
        if (-not $foundUnity) {
          Write-Host "Unity installation failed after $elapsed seconds."
          exit 1
        }
        
    - name: Activate Unity License (Windows)
      if: matrix.os == 'windows-latest'
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      shell: powershell
      run: |
        # Find Unity executable
        $unityPaths = @(
          "${env:ProgramFiles}\Unity\Hub\Editor\6000.0.55f1\Editor\Unity.exe",
          "${env:ProgramFiles}\Unity\6000.0.55f1\Editor\Unity.exe",
          "C:\Program Files\Unity\Hub\Editor\6000.0.55f1\Editor\Unity.exe"
        )
        
        $unityExe = $null
        foreach ($path in $unityPaths) {
          if (Test-Path $path) {
            $unityExe = $path
            break
          }
        }
        
        if ($null -eq $unityExe) {
          Write-Host "Unity executable not found!"
          exit 1
        }
        
        Write-Host "Using Unity at: $unityExe"
        
        # Create license file
        $env:UNITY_LICENSE | Out-File -FilePath "Unity_v6000.x.ulf" -Encoding utf8
        
        # Activate license
        & $unityExe -batchmode -nographics -silent-crashes -logFile - -manualLicenseFile Unity_v6000.x.ulf -quit
        
    - name: Run Unity Tests on Windows (Direct CLI)
      if: matrix.os == 'windows-latest'
      env:
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: false
      shell: powershell
      run: |
        # Set locale environment (already set in previous steps)
        Write-Host "Running tests with locale: ${{ matrix.locale }}"
        
        # Find Unity executable
        $unityPaths = @(
          "${env:ProgramFiles}\Unity\Hub\Editor\6000.0.55f1\Editor\Unity.exe",
          "${env:ProgramFiles}\Unity\6000.0.55f1\Editor\Unity.exe",
          "C:\Program Files\Unity\Hub\Editor\6000.0.55f1\Editor\Unity.exe"
        )
        
        $unityExe = $null
        foreach ($path in $unityPaths) {
          if (Test-Path $path) {
            $unityExe = $path
            break
          }
        }
        
        Write-Host "Using Unity at: $unityExe"
        
        # Set OpenJTalk DLL path
        $env:PATH = "$env:GITHUB_WORKSPACE\Assets\uPiper\Plugins\Windows\x86_64;$env:PATH"
        
        # Run EditMode tests with locale
        & $unityExe -batchmode -nographics -silent-crashes -logFile - -projectPath . -runTests -testPlatform EditMode -testResults test-results-${{ matrix.os }}-${{ matrix.locale }}/editmode-results.xml
        
        # Run PlayMode tests with locale
        & $unityExe -batchmode -nographics -silent-crashes -logFile - -projectPath . -runTests -testPlatform PlayMode -testResults test-results-${{ matrix.os }}-${{ matrix.locale }}/playmode-results.xml
        
    - name: Run Unity Tests (with Locale) - Non-Windows
      # Use Docker-based test runner for non-Windows platforms
      if: matrix.os != 'windows-latest'
      uses: game-ci/unity-test-runner@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        # Set culture environment variables for Unity
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: false
        LC_ALL: ${{ matrix.locale }}.UTF-8
        LANG: ${{ matrix.locale }}.UTF-8
      with:
        testMode: all
        artifactsPath: test-results-${{ matrix.os }}-${{ matrix.locale }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        checkName: Unity Test Results (${{ matrix.os }}-${{ matrix.locale }})
        
    # Create test summary for Windows
    - name: Create Windows Locale Test Summary
      if: matrix.os == 'windows-latest' && always()
      shell: powershell
      run: |
        Write-Host "## Windows Locale Test Summary" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        Write-Host "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        Write-Host "✅ OpenJTalk native library built successfully" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        Write-Host "✅ DLL verified at: Assets/uPiper/Plugins/Windows/x86_64/openjtalk_wrapper.dll" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        Write-Host "✅ Locale settings: ${{ matrix.locale }}" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        Write-Host "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
        
        # Parse test results if available
        if (Test-Path "test-results-${{ matrix.os }}-${{ matrix.locale }}") {
          $testFiles = Get-ChildItem -Path "test-results-${{ matrix.os }}-${{ matrix.locale }}" -Filter "*.xml" -Recurse
          foreach ($file in $testFiles) {
            Write-Host "### $($file.Name)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
            
            try {
              [xml]$xml = Get-Content $file.FullName
              $testSuite = $xml.SelectSingleNode("//test-suite")
              
              if ($testSuite) {
                $total = $testSuite.GetAttribute("total")
                $passed = $testSuite.GetAttribute("passed")
                $failed = $testSuite.GetAttribute("failed")
                
                Write-Host "- Total: $total" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
                Write-Host "- Passed: $passed ✅" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
                Write-Host "- Failed: $failed ❌" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
              }
            } catch {
              Write-Host "Could not parse test results from $($file.Name)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
            }
            
            Write-Host "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          }
        }
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.locale }}
        path: test-results-${{ matrix.os }}-${{ matrix.locale }}