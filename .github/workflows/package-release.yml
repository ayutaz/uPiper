name: Package Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      create_tag:
        description: 'Create git tag'
        required: false
        default: true
        type: boolean

env:
  UNITY_VERSION: 6000.0.35f1

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG_NAME="v${VERSION}"
        else
          TAG_NAME="${{ github.ref_name }}"
          VERSION="${TAG_NAME#v}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        echo "Tag: ${TAG_NAME}"
        
    - name: Validate package.json version
      run: |
        PACKAGE_VERSION=$(jq -r '.version' Assets/uPiper/package.json)
        EXPECTED_VERSION="${{ steps.version.outputs.version }}"
        
        if [[ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]]; then
          echo "❌ Version mismatch!"
          echo "package.json version: $PACKAGE_VERSION"
          echo "Expected version: $EXPECTED_VERSION"
          echo ""
          echo "Please update Assets/uPiper/package.json version to match the tag"
          exit 1
        else
          echo "✅ Version validation passed: $PACKAGE_VERSION"
        fi

  create-packages:
    name: Create Unity Packages
    needs: validate-version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Cache Library
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-PackageExport-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-PackageExport-
          Library-
          
    - name: Create Unity Package (.unitypackage)
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: ${{ env.UNITY_VERSION }}
        targetPlatform: NoTarget
        buildMethod: uPiper.Editor.PackageExporter.ExportUnityPackageCI
        customParameters: -outputPath ./Exports/uPiper-${{ needs.validate-version.outputs.version }}.unitypackage
        
    - name: Create UPM Package (.tgz)
      run: |
        # Create temporary directory for UPM package
        mkdir -p ./temp-upm-package
        
        # Copy uPiper assets (excluding .meta files)
        rsync -av --exclude='*.meta' Assets/uPiper/ ./temp-upm-package/
        
        # Ensure package.json exists
        if [[ ! -f ./temp-upm-package/package.json ]]; then
          cp Assets/uPiper/package.json ./temp-upm-package/
        fi
        
        # Create tarball using npm pack
        cd ./temp-upm-package
        if command -v npm >/dev/null 2>&1; then
          npm pack
          mv *.tgz ../Exports/
        else
          # Fallback: create tar.gz manually
          cd ..
          mkdir -p Exports
          tar -czf Exports/com.yousan.upiper-${{ needs.validate-version.outputs.version }}.tgz -C temp-upm-package .
        fi
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        
        # Extract changelog for this version
        if [[ -f CHANGELOG.md ]]; then
          echo "Extracting changelog for version $VERSION..."
          
          # Find the section for this version
          CHANGELOG_CONTENT=$(awk -v version="$VERSION" '
            /^## / {
              if (found) exit
              if ($0 ~ "\\[" version "\\]" || $0 ~ version) {
                found = 1
                next
              }
            }
            found && /^## / { exit }
            found { print }
          ' CHANGELOG.md | sed '/^[[:space:]]*$/d')
          
          if [[ -n "$CHANGELOG_CONTENT" ]]; then
            echo "Found changelog content for version $VERSION"
            {
              echo "RELEASE_NOTES<<EOF"
              echo "## 🚀 uPiper $VERSION"
              echo ""
              echo "$CHANGELOG_CONTENT"
              echo ""
              echo "---"
              echo ""
              echo "### 📦 インストール方法"
              echo ""
              echo "#### Unity Package Manager (推奨)"
              echo "\`\`\`"
              echo "https://github.com/ayutaz/uPiper.git?path=Assets/uPiper"
              echo "\`\`\`"
              echo ""
              echo "#### パッケージファイル"
              echo "- **Unity Package (.unitypackage)**: レガシー形式、全てのUnityバージョンで使用可能"
              echo "- **UPM Package (.tgz)**: Unity Package Manager用、Unity 2019.3以降"
              echo ""
              echo "### 🔗 関連リンク"
              echo "- [📚 ドキュメント](https://github.com/ayutaz/uPiper/blob/main/docs/ja/README.md)"
              echo "- [🐛 バグ報告](https://github.com/ayutaz/uPiper/issues)"
              echo "- [💬 ディスカッション](https://github.com/ayutaz/uPiper/discussions)"
              echo ""
              echo "---"
              echo "*🤖 このリリースは GitHub Actions により自動生成されました*"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "No changelog content found for version $VERSION, using default"
            {
              echo "RELEASE_NOTES<<EOF"
              echo "## 🚀 uPiper $VERSION"
              echo ""
              echo "このバージョンの詳細な変更内容については、[CHANGELOG.md](https://github.com/ayutaz/uPiper/blob/main/CHANGELOG.md) を参照してください。"
              echo ""
              echo "### 📦 インストール方法"
              echo ""
              echo "#### Unity Package Manager (推奨)"
              echo "\`\`\`"
              echo "https://github.com/ayutaz/uPiper.git?path=Assets/uPiper"
              echo "\`\`\`"
              echo ""
              echo "#### パッケージファイル"
              echo "- **Unity Package (.unitypackage)**: レガシー形式、全てのUnityバージョンで使用可能"
              echo "- **UPM Package (.tgz)**: Unity Package Manager用、Unity 2019.3以降"
              echo ""
              echo "### 🔗 関連リンク"
              echo "- [📚 ドキュメント](https://github.com/ayutaz/uPiper/blob/main/docs/ja/README.md)"
              echo "- [🐛 バグ報告](https://github.com/ayutaz/uPiper/issues)"
              echo "- [💬 ディスカッション](https://github.com/ayutaz/uPiper/discussions)"
              echo ""
              echo "---"
              echo "*🤖 このリリースは GitHub Actions により自動生成されました*"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi
        else
          echo "CHANGELOG.md not found, using minimal release notes"
          {
            echo "RELEASE_NOTES<<EOF"
            echo "## 🚀 uPiper $VERSION"
            echo ""
            echo "新しいバージョンがリリースされました。"
            echo ""
            echo "### 📦 インストール方法"
            echo ""
            echo "#### Unity Package Manager (推奨)"
            echo "\`\`\`"
            echo "https://github.com/ayutaz/uPiper.git?path=Assets/uPiper"
            echo "\`\`\`"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        fi
        
    - name: Upload Package Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: uPiper-Packages-${{ needs.validate-version.outputs.version }}
        path: Exports/
        retention-days: 30
        
    - name: Create Git Tag (if workflow_dispatch)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_tag == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ needs.validate-version.outputs.tag_name }}" -m "Release ${{ needs.validate-version.outputs.tag_name }}"
        git push origin "${{ needs.validate-version.outputs.tag_name }}"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-version.outputs.tag_name }}
        name: uPiper ${{ needs.validate-version.outputs.version }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: Exports/*
        draft: false
        prerelease: ${{ contains(needs.validate-version.outputs.version, '-') }}
        generate_release_notes: false  # We provide our own release notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    name: Notify Completion
    needs: [validate-version, create-packages]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.create-packages.result == 'success'
      run: |
        echo "✅ Package Release Completed Successfully!"
        echo "Version: ${{ needs.validate-version.outputs.version }}"
        echo "Tag: ${{ needs.validate-version.outputs.tag_name }}"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-version.outputs.tag_name }}"
        
    - name: Notify Failure  
      if: needs.create-packages.result == 'failure'
      run: |
        echo "❌ Package Release Failed!"
        echo "Please check the workflow logs for details."
        exit 1