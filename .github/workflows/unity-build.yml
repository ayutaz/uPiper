name: Unity Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      buildWindows:
        description: 'Build for Windows'
        required: false
        default: 'true'
        type: boolean
      buildMacOS:
        description: 'Build for macOS'
        required: false
        default: 'true'
        type: boolean
      buildLinux:
        description: 'Build for Linux'
        required: false
        default: 'true'
        type: boolean
      buildAndroid:
        description: 'Build for Android'
        required: false
        default: 'true'
        type: boolean
      useIL2CPP:
        description: 'Use IL2CPP backend'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
          - Android
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Cache Library
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.targetPlatform }}-
          Library-
          
    # Download native libraries for Android build
    - name: Download Android Native Libraries
      if: matrix.targetPlatform == 'Android'
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build-openjtalk-native.yml
        workflow_conclusion: success
        name: openjtalk-android-arm64-v8a
        path: native-android-libs/arm64-v8a
        
    - name: Download Android Native Libraries (armeabi-v7a)
      if: matrix.targetPlatform == 'Android'
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build-openjtalk-native.yml
        workflow_conclusion: success
        name: openjtalk-android-armeabi-v7a
        path: native-android-libs/armeabi-v7a
        
    - name: Download Android Native Libraries (x86)
      if: matrix.targetPlatform == 'Android'
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build-openjtalk-native.yml
        workflow_conclusion: success
        name: openjtalk-android-x86
        path: native-android-libs/x86
        
    - name: Download Android Native Libraries (x86_64)
      if: matrix.targetPlatform == 'Android'
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build-openjtalk-native.yml
        workflow_conclusion: success
        name: openjtalk-android-x86_64
        path: native-android-libs/x86_64
        
    # Place Android native libraries in correct location
    - name: Setup Android Native Libraries
      if: matrix.targetPlatform == 'Android'
      run: |
        mkdir -p Assets/uPiper/Plugins/Android/libs/arm64-v8a
        mkdir -p Assets/uPiper/Plugins/Android/libs/armeabi-v7a
        mkdir -p Assets/uPiper/Plugins/Android/libs/x86
        mkdir -p Assets/uPiper/Plugins/Android/libs/x86_64
        
        # Debug: Show downloaded files
        echo "=== Downloaded artifacts structure ==="
        find native-android-libs -type f -name "*.so" || echo "No .so files found"
        
        # Copy libraries from each ABI directory
        if [ -d "native-android-libs/arm64-v8a/android/arm64-v8a" ]; then
          cp -v native-android-libs/arm64-v8a/android/arm64-v8a/*.so Assets/uPiper/Plugins/Android/libs/arm64-v8a/
        fi
        
        if [ -d "native-android-libs/armeabi-v7a/android/armeabi-v7a" ]; then
          cp -v native-android-libs/armeabi-v7a/android/armeabi-v7a/*.so Assets/uPiper/Plugins/Android/libs/armeabi-v7a/
        fi
        
        if [ -d "native-android-libs/x86/android/x86" ]; then
          cp -v native-android-libs/x86/android/x86/*.so Assets/uPiper/Plugins/Android/libs/x86/
        fi
        
        if [ -d "native-android-libs/x86_64/android/x86_64" ]; then
          cp -v native-android-libs/x86_64/android/x86_64/*.so Assets/uPiper/Plugins/Android/libs/x86_64/
        fi
        
        # Show final structure
        echo "=== Final library structure ==="
        ls -la Assets/uPiper/Plugins/Android/libs/
        find Assets/uPiper/Plugins/Android/libs -name "*.so" -exec ls -la {} \;
        
    # Unity Builder を使用してビルド (Android)
    - name: Build Unity project (Android)
      if: matrix.targetPlatform == 'Android'
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.35f1
        targetPlatform: ${{ matrix.targetPlatform }}
        buildName: uPiper${{ github.event.inputs.useIL2CPP == 'true' && '-IL2CPP' || '' }}
        buildsPath: build
        androidAppBundle: false
        androidKeystoreName: ''
        androidKeystorePass: ''
        androidKeyaliasName: ''
        androidKeyaliasPass: ''
        buildMethod: UnityBuilderAction.BuildScript.Build
        customParameters: ${{ github.event.inputs.useIL2CPP == 'true' && '-scriptingBackend IL2CPP' || '-scriptingBackend Mono2x' }}
        
    # Unity Builder を使用してビルド (Non-Android)
    - name: Build Unity project (Non-Android)
      if: matrix.targetPlatform != 'Android'
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.35f1
        targetPlatform: ${{ matrix.targetPlatform }}
        buildName: uPiper${{ github.event.inputs.useIL2CPP == 'true' && '-IL2CPP' || '' }}
        buildsPath: build
        buildMethod: UnityBuilderAction.BuildScript.Build
        customParameters: ${{ github.event.inputs.useIL2CPP == 'true' && '-scriptingBackend IL2CPP' || '-scriptingBackend Mono2x' }}
        
    # ビルド成果物をアップロード
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ matrix.targetPlatform }}
        path: build/${{ matrix.targetPlatform }}
        retention-days: 7
        
  # リリース作成（タグプッシュ時）
  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    # 各プラットフォームのビルドをzip化
    - name: Package builds
      run: |
        cd artifacts
        for platform in Build-*; do
          echo "Packaging $platform"
          cd "$platform"
          zip -r "../${platform}.zip" .
          cd ..
        done
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.zip
        generate_release_notes: true
        draft: false
        prerelease: false