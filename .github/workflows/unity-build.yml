name: Unity Build

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      buildWebGL:
        description: 'Build for WebGL'
        required: false
        default: 'true'
        type: boolean
      buildWindows:
        description: 'Build for Windows'
        required: false
        default: 'true'
        type: boolean
      buildMacOS:
        description: 'Build for macOS'
        required: false
        default: 'true'
        type: boolean
      buildLinux:
        description: 'Build for Linux'
        required: false
        default: 'true'
        type: boolean

jobs:
  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
          - WebGL
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Cache Library
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.targetPlatform }}-
          Library-
          
    # Unity Builder を使用してビルド
    - name: Build Unity project
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.35f1
        targetPlatform: ${{ matrix.targetPlatform }}
        buildName: uPiper
        buildPath: build/${{ matrix.targetPlatform }}
        
    # ビルド成果物をアップロード
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ matrix.targetPlatform }}
        path: build/${{ matrix.targetPlatform }}
        retention-days: 7
        
  # WebGLビルドをGitHub Pagesにデプロイ
  deploy-pages:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download WebGL build
      uses: actions/download-artifact@v4
      with:
        name: Build-WebGL
        path: ./public
        
    # index.htmlの調整（必要に応じて）
    - name: Prepare WebGL build for Pages
      run: |
        # Unity WebGLビルドのディレクトリ構造を確認
        echo "=== WebGL build structure ==="
        find ./public -type f -name "*.html" | head -10
        
        # index.htmlがルートにない場合は移動
        if [ ! -f "./public/index.html" ]; then
          # Unity 6のWebGLビルドの標準的な場所を確認
          if [ -f "./public/uPiper/index.html" ]; then
            echo "Moving Unity WebGL build to root"
            mv ./public/uPiper/* ./public/
            rmdir ./public/uPiper
          fi
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
  # リリース作成（タグプッシュ時）
  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    # 各プラットフォームのビルドをzip化
    - name: Package builds
      run: |
        cd artifacts
        for platform in Build-*; do
          echo "Packaging $platform"
          cd "$platform"
          zip -r "../${platform}.zip" .
          cd ..
        done
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.zip
        generate_release_notes: true
        draft: false
        prerelease: false