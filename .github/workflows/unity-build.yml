name: Unity Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      buildWindows:
        description: 'Build for Windows'
        required: false
        default: 'true'
        type: boolean
      buildMacOS:
        description: 'Build for macOS'
        required: false
        default: 'true'
        type: boolean
      buildLinux:
        description: 'Build for Linux'
        required: false
        default: 'true'
        type: boolean
      buildAndroid:
        description: 'Build for Android'
        required: false
        default: 'true'
        type: boolean
      useIL2CPP:
        description: 'Use IL2CPP backend'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
          # - Android  # Temporarily disabled due to Unity licensing issues
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Cache Library
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.targetPlatform }}-
          Library-
          
    # Check and setup Android native libraries
    - name: Check and Setup Android Native Libraries
      if: matrix.targetPlatform == 'Android'
      run: |
        echo "=== Checking Android native libraries ==="
        
        # Create directory structure
        mkdir -p Assets/uPiper/Plugins/Android/libs/arm64-v8a
        mkdir -p Assets/uPiper/Plugins/Android/libs/armeabi-v7a
        mkdir -p Assets/uPiper/Plugins/Android/libs/x86
        mkdir -p Assets/uPiper/Plugins/Android/libs/x86_64
        
        # Check what libraries exist
        LIBS_FOUND=0
        for abi in arm64-v8a armeabi-v7a x86 x86_64; do
          if [ -f "Assets/uPiper/Plugins/Android/libs/$abi/libopenjtalk_wrapper.so" ]; then
            echo "‚úì Found library for $abi"
            ls -la "Assets/uPiper/Plugins/Android/libs/$abi/libopenjtalk_wrapper.so"
            LIBS_FOUND=$((LIBS_FOUND + 1))
          else
            echo "‚ö† Library not found for $abi"
            # Create placeholder to prevent build errors
            echo "// Placeholder for $abi" > "Assets/uPiper/Plugins/Android/libs/$abi/.gitkeep"
          fi
        done
        
        if [ "$LIBS_FOUND" -eq 0 ]; then
          echo "WARNING: No Android native libraries found in the repository"
          echo "The build may have limited functionality"
        else
          echo "Found $LIBS_FOUND out of 4 Android native libraries"
        fi
        
    # Unity Builder „Çí‰ΩøÁî®„Åó„Å¶„Éì„É´„Éâ (Android)
    - name: Build Unity project (Android)
      if: matrix.targetPlatform == 'Android'
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.55f1
        targetPlatform: ${{ matrix.targetPlatform }}
        buildName: uPiper${{ github.event_name == 'workflow_dispatch' && github.event.inputs.useIL2CPP == 'true' && '-IL2CPP' || '' }}
        buildsPath: build
        androidAppBundle: false
        androidKeystoreName: ''
        androidKeystorePass: ''
        androidKeyaliasName: ''
        androidKeyaliasPass: ''
        buildMethod: UnityBuilderAction.BuildScript.Build
        customParameters: -scriptingBackend ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.useIL2CPP == 'true' && 'IL2CPP' || 'Mono2x' }}
        
    # Unity Builder „Çí‰ΩøÁî®„Åó„Å¶„Éì„É´„Éâ (Non-Android)
    - name: Build Unity project (Non-Android)
      if: matrix.targetPlatform != 'Android'
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.55f1
        targetPlatform: ${{ matrix.targetPlatform }}
        buildName: uPiper${{ github.event_name == 'workflow_dispatch' && github.event.inputs.useIL2CPP == 'true' && '-IL2CPP' || '' }}
        buildsPath: build
        buildMethod: UnityBuilderAction.BuildScript.Build
        customParameters: -scriptingBackend ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.useIL2CPP == 'true' && 'IL2CPP' || 'Mono2x' }}
        
    # „Éì„É´„ÉâÊàêÊûúÁâ©„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ matrix.targetPlatform }}
        path: build/${{ matrix.targetPlatform }}
        retention-days: 7
        
  # „É™„É™„Éº„Çπ‰ΩúÊàêÔºà„Çø„Ç∞„Éó„ÉÉ„Ç∑„É•ÊôÇÔºâ
  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
    - name: Checkout for package creation
      uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Extract version from tag
      id: version
      run: |
        TAG_NAME="${{ github.ref_name }}"
        VERSION="${TAG_NAME#v}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        
    - name: Validate package.json version
      run: |
        PACKAGE_VERSION=$(jq -r '.version' Assets/uPiper/package.json)
        EXPECTED_VERSION="${{ steps.version.outputs.version }}"
        
        if [[ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]]; then
          echo "‚ùå Version mismatch!"
          echo "package.json version: $PACKAGE_VERSION"
          echo "Expected version: $EXPECTED_VERSION"
          echo ""
          echo "Please update Assets/uPiper/package.json version to match the tag"
          exit 1
        else
          echo "‚úÖ Version validation passed: $PACKAGE_VERSION"
        fi
        
    - name: Cache Library for Package Export
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-PackageExport-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-PackageExport-
          Library-
          
    - name: Create Unity Package (.unitypackage)
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.55f1
        targetPlatform: NoTarget
        buildMethod: uPiper.Editor.PackageExporter.ExportUnityPackageCI
        customParameters: -outputPath ./PackageExports/uPiper-${{ steps.version.outputs.version }}.unitypackage
        
    - name: Create UPM Package (.tgz)
      run: |
        # Create temporary directory for UPM package
        mkdir -p ./temp-upm-package
        
        # Copy uPiper assets (excluding .meta files)
        rsync -av --exclude='*.meta' Assets/uPiper/ ./temp-upm-package/
        
        # Ensure package.json exists
        if [[ ! -f ./temp-upm-package/package.json ]]; then
          cp Assets/uPiper/package.json ./temp-upm-package/
        fi
        
        # Create tarball using npm pack
        cd ./temp-upm-package
        if command -v npm >/dev/null 2>&1; then
          npm pack
          mkdir -p ../PackageExports
          mv *.tgz ../PackageExports/
        else
          # Fallback: create tar.gz manually
          cd ..
          mkdir -p PackageExports
          # Get package name from package.json
          PACKAGE_NAME=$(jq -r '.name' Assets/uPiper/package.json)
          tar -czf PackageExports/${PACKAGE_NAME}-${{ steps.version.outputs.version }}.tgz -C temp-upm-package .
        fi
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    # ÂêÑ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆ„Éì„É´„Éâ„ÇízipÂåñ
    - name: Package builds
      run: |
        cd artifacts
        for platform in Build-*; do
          echo "Packaging $platform"
          cd "$platform"
          zip -r "../${platform}.zip" .
          cd ..
        done
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Extract changelog for this version
        if [[ -f CHANGELOG.md ]]; then
          echo "Extracting changelog for version $VERSION..."
          
          # Find the section for this version
          CHANGELOG_CONTENT=$(awk -v version="$VERSION" '
            /^## / {
              if (found) exit
              if ($0 ~ "\\[" version "\\]" || $0 ~ version) {
                found = 1
                next
              }
            }
            found && /^## / { exit }
            found { print }
          ' CHANGELOG.md | sed '/^[[:space:]]*$/d')
          
          if [[ -n "$CHANGELOG_CONTENT" ]]; then
            echo "Found changelog content for version $VERSION"
            {
              echo "RELEASE_NOTES<<EOF"
              echo "## üöÄ uPiper $VERSION"
              echo ""
              echo "$CHANGELOG_CONTENT"
              echo ""
              echo "---"
              echo ""
              echo "### üì¶ „Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï"
              echo ""
              echo "#### Unity Package Manager (Êé®Â•®)"
              echo "\`\`\`"
              echo "https://github.com/ayutaz/uPiper.git?path=Assets/uPiper"
              echo "\`\`\`"
              echo ""
              echo "#### „Éë„ÉÉ„Ç±„Éº„Ç∏„Éï„Ç°„Ç§„É´"
              echo "- **Unity Package (.unitypackage)**: „É¨„Ç¨„Ç∑„ÉºÂΩ¢Âºè„ÄÅÂÖ®„Å¶„ÅÆUnity„Éê„Éº„Ç∏„Éß„É≥„Åß‰ΩøÁî®ÂèØËÉΩ"
              echo "- **UPM Package (.tgz)**: Unity Package ManagerÁî®„ÄÅUnity 2019.3‰ª•Èôç"
              echo ""
              echo "### üèóÔ∏è „Éì„É´„ÉâÊàêÊûúÁâ©"
              echo "- **Windows Build**: Windows x64Âêë„Åë„Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥„Éì„É´„Éâ"
              echo "- **macOS Build**: macOS (Intel/Apple Silicon) Âêë„Åë„Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥„Éì„É´„Éâ"
              echo "- **Linux Build**: Linux x64Âêë„Åë„Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥„Éì„É´„Éâ"
              echo ""
              echo "### üîó Èñ¢ÈÄ£„É™„É≥„ÇØ"
              echo "- [üìö „Éâ„Ç≠„É•„É°„É≥„Éà](https://github.com/ayutaz/uPiper/blob/main/docs/ja/README.md)"
              echo "- [üêõ „Éê„Ç∞Â†±Âëä](https://github.com/ayutaz/uPiper/issues)"
              echo "- [üí¨ „Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥](https://github.com/ayutaz/uPiper/discussions)"
              echo ""
              echo "---"
              echo "*ü§ñ „Åì„ÅÆ„É™„É™„Éº„Çπ„ÅØ GitHub Actions „Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "No changelog content found for version $VERSION, using default"
            {
              echo "RELEASE_NOTES<<EOF"
              echo "## üöÄ uPiper $VERSION"
              echo ""
              echo "„Åì„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅÆË©≥Á¥∞„Å™Â§âÊõ¥ÂÜÖÂÆπ„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅ[CHANGELOG.md](https://github.com/ayutaz/uPiper/blob/main/CHANGELOG.md) „ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
              echo ""
              echo "### üì¶ „Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï"
              echo ""
              echo "#### Unity Package Manager (Êé®Â•®)"
              echo "\`\`\`"
              echo "https://github.com/ayutaz/uPiper.git?path=Assets/uPiper"
              echo "\`\`\`"
              echo ""
              echo "#### „Éë„ÉÉ„Ç±„Éº„Ç∏„Éï„Ç°„Ç§„É´"
              echo "- **Unity Package (.unitypackage)**: „É¨„Ç¨„Ç∑„ÉºÂΩ¢Âºè„ÄÅÂÖ®„Å¶„ÅÆUnity„Éê„Éº„Ç∏„Éß„É≥„Åß‰ΩøÁî®ÂèØËÉΩ"
              echo "- **UPM Package (.tgz)**: Unity Package ManagerÁî®„ÄÅUnity 2019.3‰ª•Èôç"
              echo ""
              echo "### üèóÔ∏è „Éì„É´„ÉâÊàêÊûúÁâ©"
              echo "- **Windows Build**: Windows x64Âêë„Åë„Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥„Éì„É´„Éâ"
              echo "- **macOS Build**: macOS (Intel/Apple Silicon) Âêë„Åë„Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥„Éì„É´„Éâ"
              echo "- **Linux Build**: Linux x64Âêë„Åë„Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥„Éì„É´„Éâ"
              echo ""
              echo "### üîó Èñ¢ÈÄ£„É™„É≥„ÇØ"
              echo "- [üìö „Éâ„Ç≠„É•„É°„É≥„Éà](https://github.com/ayutaz/uPiper/blob/main/docs/ja/README.md)"
              echo "- [üêõ „Éê„Ç∞Â†±Âëä](https://github.com/ayutaz/uPiper/issues)"
              echo "- [üí¨ „Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥](https://github.com/ayutaz/uPiper/discussions)"
              echo ""
              echo "---"
              echo "*ü§ñ „Åì„ÅÆ„É™„É™„Éº„Çπ„ÅØ GitHub Actions „Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi
        else
          echo "CHANGELOG.md not found, using minimal release notes"
          {
            echo "RELEASE_NOTES<<EOF"
            echo "## üöÄ uPiper $VERSION"
            echo ""
            echo "Êñ∞„Åó„ÅÑ„Éê„Éº„Ç∏„Éß„É≥„Åå„É™„É™„Éº„Çπ„Åï„Çå„Åæ„Åó„Åü„ÄÇ"
            echo ""
            echo "### üì¶ „Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï"
            echo ""
            echo "#### Unity Package Manager (Êé®Â•®)"
            echo "\`\`\`"
            echo "https://github.com/ayutaz/uPiper.git?path=Assets/uPiper"
            echo "\`\`\`"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: uPiper ${{ steps.version.outputs.version }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          artifacts/*.zip
          PackageExports/*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        generate_release_notes: false