name: Unity Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      buildWindows:
        description: 'Build for Windows'
        required: false
        default: 'true'
        type: boolean
      buildMacOS:
        description: 'Build for macOS'
        required: false
        default: 'true'
        type: boolean
      buildLinux:
        description: 'Build for Linux'
        required: false
        default: 'true'
        type: boolean
      buildAndroid:
        description: 'Build for Android'
        required: false
        default: 'true'
        type: boolean
      useIL2CPP:
        description: 'Use IL2CPP backend'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
          # - Android  # Temporarily disabled due to Unity licensing issues
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Cache Library
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.targetPlatform }}-
          Library-
          
    # Check and setup Android native libraries
    - name: Check and Setup Android Native Libraries
      if: matrix.targetPlatform == 'Android'
      run: |
        echo "=== Checking Android native libraries ==="
        
        # Create directory structure
        mkdir -p Assets/uPiper/Plugins/Android/libs/arm64-v8a
        mkdir -p Assets/uPiper/Plugins/Android/libs/armeabi-v7a
        mkdir -p Assets/uPiper/Plugins/Android/libs/x86
        mkdir -p Assets/uPiper/Plugins/Android/libs/x86_64
        
        # Check what libraries exist
        LIBS_FOUND=0
        for abi in arm64-v8a armeabi-v7a x86 x86_64; do
          if [ -f "Assets/uPiper/Plugins/Android/libs/$abi/libopenjtalk_wrapper.so" ]; then
            echo "✓ Found library for $abi"
            ls -la "Assets/uPiper/Plugins/Android/libs/$abi/libopenjtalk_wrapper.so"
            LIBS_FOUND=$((LIBS_FOUND + 1))
          else
            echo "⚠ Library not found for $abi"
            # Create placeholder to prevent build errors
            echo "// Placeholder for $abi" > "Assets/uPiper/Plugins/Android/libs/$abi/.gitkeep"
          fi
        done
        
        if [ "$LIBS_FOUND" -eq 0 ]; then
          echo "WARNING: No Android native libraries found in the repository"
          echo "The build may have limited functionality"
        else
          echo "Found $LIBS_FOUND out of 4 Android native libraries"
        fi
        
    # Unity Builder を使用してビルド (Android)
    - name: Build Unity project (Android)
      if: matrix.targetPlatform == 'Android'
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.35f1
        targetPlatform: ${{ matrix.targetPlatform }}
        buildName: uPiper${{ github.event.inputs.useIL2CPP == 'true' && '-IL2CPP' || '' }}
        buildsPath: build
        androidAppBundle: false
        androidKeystoreName: ''
        androidKeystorePass: ''
        androidKeyaliasName: ''
        androidKeyaliasPass: ''
        # buildMethod: UnityBuilderAction.BuildScript.Build  # Removed - causing licensing issues
        # customParameters: ${{ github.event.inputs.useIL2CPP == 'true' && '-scriptingBackend IL2CPP' || '-scriptingBackend Mono2x' }}  # Removed - causing licensing issues
        
    # Unity Builder を使用してビルド (Non-Android)
    - name: Build Unity project (Non-Android)
      if: matrix.targetPlatform != 'Android'
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: 6000.0.35f1
        targetPlatform: ${{ matrix.targetPlatform }}
        buildName: uPiper${{ github.event.inputs.useIL2CPP == 'true' && '-IL2CPP' || '' }}
        buildsPath: build
        # buildMethod: UnityBuilderAction.BuildScript.Build  # Removed - causing licensing issues
        # customParameters: ${{ github.event.inputs.useIL2CPP == 'true' && '-scriptingBackend IL2CPP' || '-scriptingBackend Mono2x' }}  # Removed - causing licensing issues
        
    # ビルド成果物をアップロード
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ matrix.targetPlatform }}
        path: build/${{ matrix.targetPlatform }}
        retention-days: 7
        
  # リリース作成（タグプッシュ時）
  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    # 各プラットフォームのビルドをzip化
    - name: Package builds
      run: |
        cd artifacts
        for platform in Build-*; do
          echo "Packaging $platform"
          cd "$platform"
          zip -r "../${platform}.zip" .
          cd ..
        done
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.zip
        generate_release_notes: true
        draft: false
        prerelease: false