name: Build OpenJTalk Native Libraries

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'Assets/uPiper/Native/OpenJTalk/**'
      - '.github/workflows/build-openjtalk-native.yml'
  pull_request:
    paths:
      - 'Assets/uPiper/Native/OpenJTalk/**'
      - '.github/workflows/build-openjtalk-native.yml'
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            cmake_arch: x64
          - arch: x86
            cmake_arch: Win32
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
    
    - name: Configure CMake
      shell: cmd
      run: |
        cd Assets\uPiper\Native\OpenJTalk
        if not exist build\windows\${{ matrix.arch }} mkdir build\windows\${{ matrix.arch }}
        cd build\windows\${{ matrix.arch }}
        cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release ..\..\..\..
    
    - name: Build
      shell: cmd
      run: |
        cd Assets\uPiper\Native\OpenJTalk\build\windows\${{ matrix.arch }}
        nmake
    
    - name: Install
      shell: cmd
      run: |
        cd Assets\uPiper\Native\OpenJTalk\build\windows\${{ matrix.arch }}
        nmake install
    
    - name: Run Tests
      shell: cmd
      run: |
        cd Assets\uPiper\Native\OpenJTalk\build\windows\${{ matrix.arch }}
        bin\test_openjtalk.exe
    
    - name: Prepare Artifacts
      shell: bash
      run: |
        mkdir -p artifacts/windows/${{ matrix.arch }}
        cp Assets/uPiper/Native/OpenJTalk/build/windows/${{ matrix.arch }}/bin/*.dll artifacts/windows/${{ matrix.arch }}/ || true
        cp Assets/uPiper/Native/OpenJTalk/include/*.h artifacts/ || true
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openjtalk-windows-${{ matrix.arch }}
        path: artifacts/

  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Setup Cross Compilation (aarch64)
      if: matrix.arch == 'aarch64'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
    
    - name: Configure CMake
      run: |
        cd Assets/uPiper/Native/OpenJTalk
        mkdir -p build/linux/${{ matrix.arch }}
        cd build/linux/${{ matrix.arch }}
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/Assets/uPiper/Native/OpenJTalk/output/linux/${{ matrix.arch }} \
              ../../..
    
    - name: Build
      run: |
        cd Assets/uPiper/Native/OpenJTalk/build/linux/${{ matrix.arch }}
        make -j$(nproc)
    
    - name: Install
      run: |
        cd Assets/uPiper/Native/OpenJTalk/build/linux/${{ matrix.arch }}
        make install
    
    - name: Run Tests (x86_64 only)
      if: matrix.arch == 'x86_64'
      run: |
        cd Assets/uPiper/Native/OpenJTalk/build/linux/${{ matrix.arch }}
        ./bin/test_openjtalk
    
    - name: Prepare Artifacts
      run: |
        mkdir -p artifacts/linux/${{ matrix.arch }}
        cp Assets/uPiper/Native/OpenJTalk/output/linux/${{ matrix.arch }}/lib/*.so artifacts/linux/${{ matrix.arch }}/
        cp Assets/uPiper/Native/OpenJTalk/output/linux/${{ matrix.arch }}/include/*.h artifacts/
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openjtalk-linux-${{ matrix.arch }}
        path: artifacts/

  build-macos:
    name: Build macOS (Universal)
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install CMake
      run: brew install cmake
    
    - name: Build x86_64
      run: |
        cd Assets/uPiper/Native/OpenJTalk
        mkdir -p build/macos/x86_64
        cd build/macos/x86_64
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_ARCHITECTURES=x86_64 \
              -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/Assets/uPiper/Native/OpenJTalk/output/macos/x86_64 \
              ../../..
        make -j$(sysctl -n hw.ncpu)
        make install
    
    - name: Build arm64
      run: |
        cd Assets/uPiper/Native/OpenJTalk
        mkdir -p build/macos/arm64
        cd build/macos/arm64
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_ARCHITECTURES=arm64 \
              -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/Assets/uPiper/Native/OpenJTalk/output/macos/arm64 \
              ../../..
        make -j$(sysctl -n hw.ncpu)
        make install
    
    - name: Create Universal Binary
      run: |
        mkdir -p Assets/uPiper/Native/OpenJTalk/output/macos/universal/lib
        lipo -create \
          Assets/uPiper/Native/OpenJTalk/output/macos/x86_64/lib/libopenjtalk_wrapper.dylib \
          Assets/uPiper/Native/OpenJTalk/output/macos/arm64/lib/libopenjtalk_wrapper.dylib \
          -output Assets/uPiper/Native/OpenJTalk/output/macos/universal/lib/libopenjtalk_wrapper.dylib
    
    - name: Run Tests
      run: |
        cd Assets/uPiper/Native/OpenJTalk/build/macos/arm64
        ./bin/test_openjtalk
    
    - name: Create Bundle
      run: |
        BUNDLE_DIR="artifacts/macos/openjtalk_wrapper.bundle"
        mkdir -p "$BUNDLE_DIR/Contents/MacOS"
        cp Assets/uPiper/Native/OpenJTalk/output/macos/universal/lib/libopenjtalk_wrapper.dylib "$BUNDLE_DIR/Contents/MacOS/openjtalk_wrapper"
        
        cat > "$BUNDLE_DIR/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDevelopmentRegion</key>
            <string>English</string>
            <key>CFBundleExecutable</key>
            <string>openjtalk_wrapper</string>
            <key>CFBundleIdentifier</key>
            <string>com.upiper.openjtalk</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>OpenJTalk Wrapper</string>
            <key>CFBundlePackageType</key>
            <string>BNDL</string>
            <key>CFBundleVersion</key>
            <string>1.0.0</string>
        </dict>
        </plist>
        EOF
        
        cp Assets/uPiper/Native/OpenJTalk/output/macos/x86_64/include/*.h artifacts/
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openjtalk-macos-universal
        path: artifacts/

  build-webgl:
    name: Build WebGL (Emscripten)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: 3.1.50
    
    - name: Configure CMake
      run: |
        cd Assets/uPiper/Native/OpenJTalk
        mkdir -p build/webgl
        cd build/webgl
        emcmake cmake -DCMAKE_BUILD_TYPE=Release \
                      -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/Assets/uPiper/Native/OpenJTalk/output/webgl \
                      -DBUILD_TESTS=OFF \
                      ../..
    
    - name: Build
      run: |
        cd Assets/uPiper/Native/OpenJTalk/build/webgl
        emmake make -j$(nproc)
    
    - name: Prepare Artifacts
      run: |
        mkdir -p artifacts/webgl
        cp Assets/uPiper/Native/OpenJTalk/build/webgl/*.js artifacts/webgl/ || true
        cp Assets/uPiper/Native/OpenJTalk/build/webgl/*.wasm artifacts/webgl/ || true
        cp Assets/uPiper/Native/OpenJTalk/include/*.h artifacts/
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openjtalk-webgl
        path: artifacts/

  create-release:
    name: Create Release Package
    needs: [build-windows, build-linux, build-macos, build-webgl]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create Unity Plugin Structure
      run: |
        mkdir -p uPiper-OpenJTalk-Native/Plugins/Windows/x86
        mkdir -p uPiper-OpenJTalk-Native/Plugins/Windows/x86_64
        mkdir -p uPiper-OpenJTalk-Native/Plugins/Linux/x86_64
        mkdir -p uPiper-OpenJTalk-Native/Plugins/Linux/aarch64
        mkdir -p uPiper-OpenJTalk-Native/Plugins/macOS
        mkdir -p uPiper-OpenJTalk-Native/Plugins/WebGL
        mkdir -p uPiper-OpenJTalk-Native/Include
        
        # Windows
        cp artifacts/openjtalk-windows-x86/windows/x86/*.dll uPiper-OpenJTalk-Native/Plugins/Windows/x86/
        cp artifacts/openjtalk-windows-x64/windows/x64/*.dll uPiper-OpenJTalk-Native/Plugins/Windows/x86_64/
        
        # Linux
        cp artifacts/openjtalk-linux-x86_64/linux/x86_64/*.so uPiper-OpenJTalk-Native/Plugins/Linux/x86_64/
        cp artifacts/openjtalk-linux-aarch64/linux/aarch64/*.so uPiper-OpenJTalk-Native/Plugins/Linux/aarch64/
        
        # macOS
        cp -r artifacts/openjtalk-macos-universal/macos/*.bundle uPiper-OpenJTalk-Native/Plugins/macOS/
        
        # WebGL
        cp artifacts/openjtalk-webgl/webgl/* uPiper-OpenJTalk-Native/Plugins/WebGL/ || true
        
        # Headers
        cp artifacts/openjtalk-windows-x64/*.h uPiper-OpenJTalk-Native/Include/
        
        # Create README
        cat > uPiper-OpenJTalk-Native/README.md << EOF
        # uPiper OpenJTalk Native Libraries
        
        This package contains pre-built OpenJTalk native libraries for Unity.
        
        ## Supported Platforms
        - Windows (x86, x64)
        - Linux (x86_64, aarch64)
        - macOS (Universal Binary: x86_64 + arm64)
        - WebGL (Experimental)
        
        ## Installation
        1. Copy the contents of the Plugins folder to your Unity project's Assets/Plugins folder
        2. Include the header files from the Include folder in your native code if needed
        
        ## Version
        Built from commit: ${{ github.sha }}
        Build date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF
    
    - name: Create Archive
      run: |
        zip -r uPiper-OpenJTalk-Native.zip uPiper-OpenJTalk-Native/
    
    - name: Upload Release Package
      uses: actions/upload-artifact@v4
      with:
        name: uPiper-OpenJTalk-Native-Release
        path: uPiper-OpenJTalk-Native.zip