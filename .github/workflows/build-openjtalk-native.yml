name: Build OpenJTalk Native Libraries

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'NativePlugins/OpenJTalk/**'
      - '.github/workflows/build-openjtalk-native.yml'
  pull_request:
    paths:
      - 'NativePlugins/OpenJTalk/**'
      - '.github/workflows/build-openjtalk-native.yml'
  workflow_dispatch:

jobs:
  build-windows-cross:
    name: Build Windows (Cross-compile with Docker)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker Image
      run: |
        cd NativePlugins/OpenJTalk
        echo "=== Building Docker image ==="
        echo "Current directory: $(pwd)"
        echo "Checking Dockerfile exists:"
        ls -la Dockerfile.windows-cross
        docker build -f Dockerfile.windows-cross -t openjtalk-windows-cross . || {
          echo "Docker build failed with exit code $?"
          exit 1
        }
    
    - name: Build Windows DLL with Docker
      run: |
        cd NativePlugins/OpenJTalk
        
        # Convert line endings to Unix format
        sudo apt-get update && sudo apt-get install -y dos2unix
        dos2unix *.sh
        
        # Make scripts executable
        chmod +x build_full_windows.sh fetch_dependencies_ci.sh build_dependencies_cross.sh
        
        # Run the build in Docker container
        echo "=== Running build in Docker container ==="
        echo "Current directory: $(pwd)"
        echo "Checking build script exists:"
        ls -la build_full_windows.sh
        
        # Debug: Check what's in the current directory
        echo "=== Files in current directory before Docker run ==="
        ls -la
        echo "=== Checking if scripts are executable ==="
        ls -la *.sh
        
        # Fix permissions and run with error handling
        docker run --rm -v "${PWD}:/workspace" -w /workspace openjtalk-windows-cross /bin/bash -c "
          echo '=== Docker container started ==='
          pwd
          echo '=== Files in workspace ==='
          ls -la
          echo '=== Making scripts executable ==='
          chmod +x *.sh
          echo '=== Converting line endings ==='
          dos2unix *.sh
          echo '=== Testing environment first ==='
          bash ./test_docker.sh || true
          echo '=== Running simple build test ==='
          bash ./build_windows_simple.sh || true
          echo '=== Now running full build script ==='
          bash ./build_full_windows.sh
        " || {
          echo "Docker run failed with exit code $?"
          echo "=== Docker logs ==="
          docker logs $(docker ps -lq) || true
          exit 1
        }
    
    - name: Test DLL Exports
      run: |
        cd NativePlugins/OpenJTalk
        echo "Checking DLL exports..."
        # Install mingw tools for objdump
        sudo apt-get install -y binutils-mingw-w64-x86-64
        x86_64-w64-mingw32-objdump -p output_windows/openjtalk_wrapper.dll | grep -E "DLL Name:|EXPORT" | head -20
        
        # Check DLL size
        ls -la output_windows/openjtalk_wrapper.dll
    
    - name: Prepare Artifacts
      run: |
        mkdir -p artifacts/windows/x64
        # Copy the cross-compiled DLL
        cp NativePlugins/OpenJTalk/output_windows/*.dll artifacts/windows/x64/
        # Copy header files
        cp NativePlugins/OpenJTalk/include/*.h artifacts/ || true
        # Show artifact info
        ls -la artifacts/windows/x64/
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openjtalk-windows-x64
        path: artifacts/

  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        arch: [x86_64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Setup Dependencies
      run: |
        cd NativePlugins/OpenJTalk
        echo "Fetching and building OpenJTalk dependencies..."
        # Use CI-specific scripts for better reliability
        if [ -f "fetch_dependencies_ci.sh" ]; then
          chmod +x fetch_dependencies_ci.sh build_dependencies_ci.sh
          ./fetch_dependencies_ci.sh
          ./build_dependencies_ci.sh
        else
          chmod +x fetch_dependencies.sh build_dependencies.sh
          ./fetch_dependencies.sh
          ./build_dependencies.sh
        fi
    
    - name: Setup Cross Compilation (aarch64)
      if: matrix.arch == 'aarch64'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
    
    - name: Check Dictionary Files
      run: |
        cd NativePlugins/OpenJTalk
        echo "Checking dictionary files..."
        ls -la dictionary/ || echo "Dictionary directory not found"
    
    - name: Configure CMake
      run: |
        cd NativePlugins/OpenJTalk
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
    
    - name: Build
      run: |
        cd NativePlugins/OpenJTalk/build
        make -j$(nproc)
    
    - name: Run Tests (x86_64 only)
      if: matrix.arch == 'x86_64'
      run: |
        cd NativePlugins/OpenJTalk/build
        # Run all tests using CTest
        ctest --output-on-failure
    
    - name: Prepare Artifacts
      run: |
        mkdir -p artifacts/linux/${{ matrix.arch }}
        # Copy shared library from build output
        cp NativePlugins/OpenJTalk/build/lib/*.so artifacts/linux/${{ matrix.arch }}/ || true
        # Copy header files
        cp NativePlugins/OpenJTalk/include/*.h artifacts/ || true
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openjtalk-linux-${{ matrix.arch }}
        path: artifacts/

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install CMake
      run: brew install cmake
    
    - name: Setup Dependencies
      run: |
        cd NativePlugins/OpenJTalk
        echo "Fetching and building OpenJTalk dependencies..."
        # Use CI-specific scripts for better reliability
        if [ -f "fetch_dependencies_ci.sh" ]; then
          chmod +x fetch_dependencies_ci.sh build_dependencies_ci.sh
          ./fetch_dependencies_ci.sh
          ./build_dependencies_ci.sh
        else
          chmod +x fetch_dependencies.sh build_dependencies.sh
          ./fetch_dependencies.sh
          ./build_dependencies.sh
        fi
    
    - name: Check Dictionary Files
      run: |
        cd NativePlugins/OpenJTalk
        echo "Checking dictionary files..."
        ls -la dictionary/ || echo "Dictionary directory not found"
    
    - name: Build Native Library
      run: |
        cd NativePlugins/OpenJTalk
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        make -j$(sysctl -n hw.ncpu)
    
    - name: Run Tests
      run: |
        cd NativePlugins/OpenJTalk/build
        # Run all tests using CTest
        ctest --output-on-failure
    
    - name: Prepare Artifacts
      run: |
        mkdir -p artifacts/macos
        # Copy the dylib
        cp NativePlugins/OpenJTalk/build/lib/libopenjtalk_wrapper.dylib artifacts/macos/
        # Copy header files
        cp NativePlugins/OpenJTalk/include/*.h artifacts/ || true
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openjtalk-macos-universal
        path: artifacts/


  create-release:
    name: Create Release Package
    needs: [build-windows-cross, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create Unity Plugin Structure
      run: |
        mkdir -p uPiper-OpenJTalk-Native/Plugins/Windows/x86_64
        mkdir -p uPiper-OpenJTalk-Native/Plugins/Linux/x86_64
        mkdir -p uPiper-OpenJTalk-Native/Plugins/Linux/aarch64
        mkdir -p uPiper-OpenJTalk-Native/Plugins/macOS
        mkdir -p uPiper-OpenJTalk-Native/Include
        
        # Windows
        cp artifacts/openjtalk-windows-x64/windows/x64/*.dll uPiper-OpenJTalk-Native/Plugins/Windows/x86_64/
        
        # Linux
        cp artifacts/openjtalk-linux-x86_64/linux/x86_64/*.so uPiper-OpenJTalk-Native/Plugins/Linux/x86_64/
        cp artifacts/openjtalk-linux-aarch64/linux/aarch64/*.so uPiper-OpenJTalk-Native/Plugins/Linux/aarch64/
        
        # macOS
        cp artifacts/openjtalk-macos-universal/macos/*.dylib uPiper-OpenJTalk-Native/Plugins/macOS/
        
        # Headers
        cp artifacts/openjtalk-windows-x64/*.h uPiper-OpenJTalk-Native/Include/
        
        # Create README
        cat > uPiper-OpenJTalk-Native/README.md << EOF
        # uPiper OpenJTalk Native Libraries
        
        This package contains pre-built OpenJTalk native libraries for Unity.
        
        ## Supported Platforms
        - Windows (x64 only)
        - Linux (x86_64, aarch64)
        - macOS (Universal Binary: x86_64 + arm64)
        
        ## Installation
        1. Copy the contents of the Plugins folder to your Unity project's Assets/Plugins folder
        2. Include the header files from the Include folder in your native code if needed
        
        ## Version
        Built from commit: ${{ github.sha }}
        Build date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF
    
    - name: Create Archive
      run: |
        zip -r uPiper-OpenJTalk-Native.zip uPiper-OpenJTalk-Native/
    
    - name: Upload Release Package
      uses: actions/upload-artifact@v4
      with:
        name: uPiper-OpenJTalk-Native-Release
        path: uPiper-OpenJTalk-Native.zip